{"name":"Hyfo","tagline":"Hydrological and Forecasting Tools","body":"\r\n# hyfo \r\n\r\n#### is designed for hydrology and forecasting anaylasis, containing a number of tools including data extration, data processing and data visulization. There are two main parts in the package, as well as in this mannual:\r\n\r\n1. Hydrology\r\n* Providing tools from raw data extration to final precipitation data used by model.\r\n* e.g., data extraction from file, precipitation gap filler, annual precipitation calculation.\r\n\r\n2. Forecasting\r\n* Providing tools from forecasting data visulization and analysis.\r\n* e.g., get spatial maps, data analysis and bias analysis.\r\n\r\n##### Note\r\n\r\n* For the forecasting tools part, `hyfo` mainly focuses on the post processing of the gridData derived from forecasts or other sources. The input is a list file, usually a result from  `loadGridData{ecomsUDG.Raccess}` or `loadECOMS{ecomsUDG.Raccess}`. Pacakage`{ecomsUDG.Raccess}`is designed for getting access to different dataset, and also can load grid file (like netcdf file) directly.\r\n\r\n* The functions end with `_anarbe` are the functions designed specially for some case in Spain, those functions mostly are about data collection of the anarbe catchment, which will be introduced in the end fo this mannual.\r\n\r\n# Content\r\n1. Hydrology\r\n  + 1.1 Data Preparation\r\n      + 1.1.1 From File\r\n      + 1.1.2 Mannually\r\n  + 1.2 Rainfall Analysis\r\n  + 1.3 Extract Common Period from Different Time Series\r\n  + 1.4 Fill Gaps (rainfall data gaps)\r\n  + 1.5 Seasonal and Monthly Precipitation\r\n2. Forecasting\r\n  + 2.1 Plot Spatial Map\r\n  + 2.2 Add Background (catchment and gauging stations)\r\n    + 2.2.1 Add catchment shape file.\r\n    + 2.2.2 Add station locations\r\n  + 2.3 Precipitation Bar Plot\r\n  + 2.4 Analysis and Comparison\r\n    + 2.4.1 Spatial Map\r\n    + 2.4.2 Bar Plot\r\n3. Anarbe Case\r\n\r\n\r\n# 1. Hydrology\r\n\r\n##### Note\r\n\r\nIf you are an experienced R user, and know how to read data in R, deal with dataframe, generate date and list, please start from next charpter, \"1.2 Rainfall Analysis\"\r\n\r\n\r\n\r\n## 1.1 Data Preparation\r\n\r\n### 1.1.1 From File\r\n\r\n`hyfo` does provide a common tool for collecting data from different type of files, including \"txt\", \r\n\r\n\"csv\" and \"excel\", which has to be assigned to the argument `fileType`.\r\n\r\nNow let's use internal data as an example.\r\n\r\n```{r}\r\nlibrary(hyfo)#load the package.\r\n# get the folder containing different csv (or other type) files.\r\nfile <- system.file(\"extdata\", \"1999.csv\", package = \"hyfo\")\r\nfolder <- strsplit(file, '1999')[[1]][1]\r\n\r\n# Extract and combine content from different files and in each file, the extracted zone is \r\n# from row 10 to row 20, Column 1 to column2.\r\na <- collectData(folder, fileType = 'csv', range = c(10, 20, 1, 2))\r\nstr(a)\r\n```\r\n\r\n`a` cannot be directly inputed in `hyfo`, it still needs some process.\r\n```{r}\r\n# Check the date to see if it follows the format in ?as.Date(), if not, \r\n# use as.Date to convert. \r\na <- data.frame(a)\r\n#get date\r\ndate <- a[, 1]\r\n\r\n# The original format is d/m/year, convert to formal format.\r\ndate <- as.Date(date, format = '%d/%m/%Y')\r\na[, 1] <- date\r\n\r\n# Now a has become `a` time series dataframe, which is the atom element of the analysis. \r\n#`hyfo` deals with list containing different time series dataframe. In this example, \r\n#there is only one dataframe, and more examples please refer to the following chapter.\r\ndatalist <- list(a)\r\n\r\n# Use getAnnual as an example, here since `a` is not a complete time series, \r\n# the result is only base on the input.\r\n# getAnnual gives the annual precipitation of each year, \r\n# and will be introduced in the next chapter.\r\ngetAnnual(datalist)\r\n```\r\n\r\n\r\n### 1.1.2 Mannually\r\n\r\nFollowing example shows a simple way to generate dataframe with start date, end date, and the value. Here in the example, `sample()` is used to generate random values, while in real case it will be a vector containing time series values.\r\n```{r, fig.show = 'hold', fig.height = 4, fig.width = 7}\r\n# Generate timeseries datalist. Each data frame consists of a Date and a value.\r\nlibrary(hyfo)\r\nAAA <- data.frame(\r\n  Date = seq(as.Date('1990-10-28'), as.Date('1997-4-1'), 1), # Date column\r\n  AAA = sample(1:10, length(seq(as.Date('1990-10-28'), # value column\r\n                                as.Date('1997-4-1'), 1)), repl = TRUE))\r\n\r\nBBB <- data.frame(\r\n  Date = seq(as.Date('1993-3-28'), as.Date('1999-1-1'),1), \r\n  BBB = sample(1:10, length(seq(as.Date('1993-3-28'), \r\n                                as.Date('1999-1-1'),1)), repl = TRUE))\r\n\r\nCCC <- data.frame(\r\n  Date = seq(as.Date('1988-2-2'), as.Date('1996-1-1'),1), \r\n  CCC = sample(1:10, length(seq(as.Date('1988-2-2'), \r\n                                as.Date('1996-1-1'),1)), repl = TRUE)) \r\n\r\ndatalist <- list(AAA, BBB, CCC)# dput() and dget() can be used to save and load list file.\r\na <- getAnnual(datalist)\r\n```\r\n\r\n\r\n\r\n## 1.2 Rainfall Analysis\r\n\r\nAssuming we have three gauging stations named \"AAA\", \"BBB\", \"CCC\", the precipitation information can be get by the following:\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\n# testdl is a datalist provided by the package as a test. \r\n# It's a list containing different time series.\r\ndata(testdl)\r\na <- getAnnual(testdl)\r\n```\r\n\r\nAs shown above, the annual precipitation and the number of missing values are shown in the figure. Knowing how many missing values you have is alway important when calculating the mean annual precipitation. \r\n\r\nNow we want to get the mean annual precipitation.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getAnnual(testdl, output = 'mean')\r\na\r\n```\r\n\r\nMean annual precipitation is calculated, but as we can see in the figure before, it's not reliable, since there are a lot of missing values in AAA and CCC, especially in AAA, in 1993, there are more than 30 missing values in a year. So we have to decide which is the threshold for the valid record. the default is 355, which means in a year (355 or 365 days), if the valid records (not missing) exceeds 355, then this year is taken into consideration in the mean annual preicipitation calculation.\r\n```{r, fig.show='hold', fig.height=3, fig.width=3}\r\ngetAnnual(testdl, output = 'mean', minRecords = 300)\r\ngetAnnual(testdl, output = 'mean', minRecords = 365)\r\n```\r\n\r\nIf you are not satisfied with the title and x axis and y axis, you can assign them yourself.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7, results='hide'}\r\na <- getAnnual(testdl, output = 'mean', title = 'aaa', x = 'aaa', y = 'aaa')\r\n```\r\n\r\nIf you want to calculate annual rainfall for a single dataframe containing one time series.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getAnnual_dataframe(testdl[[1]])\r\na\r\n```\r\n\r\n\r\n\r\n## 1.3 Extract Common Period from Different Time Series\r\n\r\nNow we have the general information of the precipitation, if we want to use them in a model, we have to extract the common period of them, and use the common period precipitation to analyze.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ntestdl_new <- extractPeriod(testdl, commonPeriod = TRUE )\r\nstr(testdl_new)\r\n```\r\n\r\nIf we want to extract data from a certain period, we can assgin start and end date.\r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\n# Extract period of the winter of 1994\r\ntestdl_new <- extractPeriod(testdl, startDate = '1994-12-01', endDate = '1995-03-01' )\r\nstr(testdl_new)\r\n```\r\n\r\n\r\n\r\n## 1.4 Fill Gaps (rainfall data gaps)\r\n\r\nAlthough we have got the precipitation of the common period, we can still see that there are some missing values inside, which we should fill.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ntestdl_new <- extractPeriod(testdl, commonPeriod = TRUE )\r\na <- getAnnual(testdl_new)\r\na\r\n```\r\n\r\nFirst we have to transform the datalist to dataframe, which can be done by the code below:\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ndf <- list2Dataframe(testdl_new)\r\nhead(df)\r\n```\r\n\r\nFrom above, we can see that in the gauging station \"AAA\", there are some missing value marked as \"NA\". Now we are going to fill these gaps.\r\n\r\nThe gap filling is based on the correlation and linear regression between each two gauging stations, correlation table, correlation Order and Linear Coefficients are also printed when doing the calculation. Details can be found in  `?fillGap`.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ndf_filled <- fillGap(df)\r\nhead(df_filled)\r\n```\r\n\r\nDefault correlation period is \"daily\", while sometimes the daily rainfall correlation of precipitation is not so strong, we can also select the correlation period.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ndf_filled <- fillGap(df, corPeriod = 'monthly')\r\nhead(df_filled)\r\ndf_filled <- fillGap(df, corPeriod = 'yearly')\r\nhead(df_filled)\r\n```\r\n\r\n\r\n\r\n## 1.5 Seasonal and Monthly Precipitation\r\n\r\nSometimes we need to know not only the annual precipitation, but also the precipitation of a certain month or certain season.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ndata(testdl)\r\n# year and mon can be extracted from date.\r\nTS  <- testdl[[1]]\r\nyear = as.numeric(format(TS[, 1], '%Y'))\r\nmonth = as.numeric(format(TS[, 1], '%m'))\r\n```\r\nGet the mean spring precipitation.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getMeanPreci(TS[, 2], method = 'spring', yearIndex = year, monthIndex = month)\r\na\r\n```\r\nGet the series of spring precipitation, set `fullResults = TRUE`.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getMeanPreci(TS[, 2], method = 'spring', yearIndex = year, monthIndex = month,\r\n                  fullResults = TRUE)\r\na\r\n```\r\nIf missing value is excluded, set omitNA = TRUE.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getMeanPreci(TS[, 2], method = 'winter', yearIndex = year, monthIndex = month,\r\n                  omitNA = TRUE, fullResults = TRUE)\r\na\r\n```\r\nGet special month precipitation, e.g. march.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getMeanPreci(TS[, 2], method = 3, yearIndex = year, monthIndex = month,\r\n                  fullResults = TRUE)\r\na\r\n```\r\nWe can also get annual precipitation.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getMeanPreci(TS[, 2], method = 'annual', yearIndex = year, monthIndex = month,\r\n                  fullResults = TRUE)\r\n```\r\n\r\n\r\n# 2. Forecasting\r\n\r\n##### Note\r\n\r\nIf an ensemble forecasting data is loaded, there will be one dimension called  \"member\", by default, `hyfo` will calculate the mean of different members. If you want to see a special member, add `member` argument to `getSpatialMap`, e.g., `getSpatialMap(tgridData, method = 'meanAnnual', member = 3)`, `getPreciBar(tgridData, method = 'annual', member = 14)`\r\n\r\n## 2.1 Plot Spatial Map\r\n\r\nAs described at the start of the mannual, `hyfo` is mainly in charge of the post processing of the forecast data. Input of `hyfo` should be the result from  `loadGridData{ecomsUDG.Raccess}` or `loadECOMS{ecomsUDG.Raccess}`. An example is included in the package. \r\n\r\nIf we want to see the mean daily precipitation.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ndata(tgridData)\r\na <- getSpatialMap(tgridData, method = 'meanAnnual')\r\n```\r\n\r\nThere are several methods to be seleted in the function, details can be found by `?getSpatialMap`.\r\n\r\nSometimes there exists a great difference in the whole map, e.g., the following value, `c(100, 2, 2,6, 1,7)`, since the maximum value is too large, so in the plot, by normal plot scale, we can only recognize value 100 and the rest, it's hard for us to tell the difference between 2, 2.6, and 1.7 from the plot. In this situation, the value needs to be processed before plotting. Here `scale` provides a way to decide the plot scale.\r\n\r\n`scale` passes the arguments to the `trans` argument in `ggplot2`. The most common scale is \"sqrt\" and \"log10\", which focus more on the minutiae. Default is \"identity\", which means no change to the plot scale.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getSpatialMap(tgridData, method = 'meanAnnual', scale = 'sqrt')\r\n```\r\n\r\nHere in our example, because the region is too small, and the differences is not so big, so it's not so obvious to tell from the plot. But if in a map, both dry region and wet region is included, that will be more obvious to see the difference between the plot scales.\r\n\r\n\r\nAlso, if you are not satisfied with the title, x axis and y axis, you can assgin yourself.\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getSpatialMap(tgridData, method = 'meanAnnual', scale = 'sqrt', \r\n                   title = 'aaa', x = 'aaa', y = 'aaa')\r\n```\r\n\r\n## 2.2 Add Background (catchment and gauging stations)\r\n\r\nThe default background is the world map, while if you have other backgrounds like catchment shape file and station location file, you are welcome to import them as background.\r\n\r\n### 2.2.1 Add catchment shape file\r\n\r\nCatchment shape file needs to be processed with a very simple step. It's based on the package `rgdal`, details can be found by `?shp2cat`\r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\n# Use the test file provided by hyfo\r\nfile <- system.file(\"extdata\", \"testCat.shp\", package = \"hyfo\")\r\ncat <- shp2cat(file)\r\n# cat is the catchment file.\r\n```\r\n\r\nThen the catchment file `cat` can be inputed as background.\r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getSpatialMap(tgridData, method = 'meanAnnual', catchment = cat)\r\n```\r\n\r\n### 2.2.2 Add station locations\r\n\r\nPoints file needs to be read into dataframe, and special column has to be assigned, details can be found by `?getSpatialMap_mat`\r\n```{r, fig.show='hold', fig.height=6, fig.width=7}\r\n# Use the points file provided by hyfo\r\nfile <- system.file(\"extdata\", \"points.txt\", package = \"hyfo\")\r\npoints <- read.table(file, header = TRUE, sep = ',' )\r\ngetSpatialMap(tgridData, method = 'winter', points = points, catchment = cat)\r\n\r\n```\r\n\r\nAs can be seen above, the color of the points represents the elevation, the size of the points represents the value, e.g., rainfall value.\r\n\r\n\r\n## 2.3 Precipitation Bar Plot\r\n\r\nBisides spatial map, bar plot can also be plotted. The value in the bar plot is spatially averaged, i.e. the value in the bar plot is the mean value over the region.\r\n\r\nAnnual precipitation.\r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\ndata(tgridData)\r\na <- getPreciBar(tgridData, method = 'annual')\r\n```\r\n\r\nMean monthly precipitation over the whole period, with the ranges for each month. But not all kinds of bar plot have a plot range.\r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getPreciBar(tgridData, method = 'meanMonthly')\r\na <- getPreciBar(tgridData, method = 'meanMonthly', plotRange = FALSE)\r\n```\r\n\r\nSeasonal precipitation, and monthly precipitation can also be plotted. \r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getPreciBar(tgridData, method = 'spring')# spring precipitation for each year\r\na <- getPreciBar(tgridData, method = 3) # march precipitation for each year\r\n```\r\n\r\n## 2.4 Analysis and Comparison\r\n\r\nFor some cases, analysis and comparison are necesssary, which are also provided by `hyfo`. \r\n\r\nThere are three different kinds of output from `getSpatialMap` and `getPreciBar`, respectively, `output = 'data'`, `output = 'ggplot'` and `output = 'plot'`. \r\n\r\n`output = 'data'` is default in the function and do not need to be declare when input. It is mainly used in analyzing and replot the results.\r\n\r\n`output = 'ggplot'` is used when combining different plots.\r\n\r\n`output = 'plot'` is used when a layer output is needed. the output can be directly printed, and can be mannually combined by the plot arrange functions, e.g., `grid.arrange()`\r\n\r\n##### Note:\r\n**All the comparisons must be comparable, e.g.,**\r\n\r\n* For `getSpatialMap_comb`, the maps to be compared should be with same size and resolution, in other words, they should be fully overlapped by each other. Check `?getSpatialMap_comb` for details.\r\n* For `getPreciBar_comb`, the bar plots to be compared should belong to the same kind, e.g., spring and winter, January and December, and couldn't be spring and annual. Details can be found by `?getPreciBar_comb`\r\n\r\n### 2.4.1 Spatial Map\r\n\r\nThe default \"data\" output provides a matrix, representing the raster information of the spatial map. \r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\na <- getSpatialMap(tgridData, method = 'meanAnnual')\r\na\r\n```\r\n\r\nThis matrix is upside down from what you can see from the plot. **DO NOT try to change this matrix.**\r\n`hyfo` can deal with it.\r\n\r\n```{r, fig.show='hold', fig.height=4, fig.width=7}\r\n# For re-plot the matrix\r\nb <- getSpatialMap_mat(a)\r\n\r\n# Without title and x and y, also you can assign yourself.\r\nb <- getSpatialMap_mat(a, title = 'aaa', x = 'aaa', y = '')\r\n```\r\n\r\nThe matrix can be used to make different analysis and plot again.\r\n\r\n##### Note\r\n**If the matrix doesn't come from `getSpatialMap`, dimension name of longitude and latitude needs to be provided to the matrix, in order to be plotted.**\r\n```{r, fig.show='hold', fig.height=4, fig.width=7, results='hide'}\r\n\r\na1 <- getSpatialMap(tgridData, method = 'mean')\r\na2 <- getSpatialMap(tgridData, method = 'max')\r\n\r\n# To see the difference between mean value and maximum value.\r\nb <- a2 - a1\r\ngetSpatialMap_mat(b, title = '', x = '', y = '')\r\n\r\n# To make some changes to mean value.\r\nb <- a1 * 3 -1\r\ngetSpatialMap_mat(b, title = '', x = '', y = '')\r\n\r\n# Bias, variation and other analysis can also be processed \r\n# the same way. \r\n# Just apply the analysis to the matrix and \r\n# use getSpatialMap_mat to plot.\r\n```\r\n\r\nIf multi-plot is needed, `hyfo` can also combine different plots together. Use `output = ggplot`, which gives back the a special format that can be easily used by `ggplot2`\r\n\r\n```{r, fig.show='hide', fig.height=4, fig.width=7}\r\n\r\na1 <- getSpatialMap(tgridData, method = 'spring', output = 'ggplot')\r\na2 <- getSpatialMap(tgridData, method = 'summer', output = 'ggplot')\r\na3 <- getSpatialMap(tgridData, method = 'meanAnnual', output = 'ggplot')\r\na4 <- getSpatialMap(tgridData, method = 'winter', output = 'ggplot')\r\n\r\n```\r\n\r\n```{r, fig.show='hold', fig.height=6, fig.width=7}\r\n\r\ngetSpatialMap_comb(a1, a2, a3, a4, nrow = 2)# you cannot assign title\r\ngetSpatialMap_comb(a1, a2, a3, a4, nrow = 4)\r\n\r\n```\r\n\r\n`getSpatialMap_comb` accepts list (using `list =`) object too, which is easier for multi-plot. First list of 12 months are got.\r\n```{r, fig.show='hide'}\r\nc <- lapply(1:12, function(x) getSpatialMap(tgridData, method = x, output = 'ggplot') )\r\n```\r\n\r\nThen they are combined.\r\n```{r, fig.show='hold', fig.height=6, fig.width=7}\r\ngetSpatialMap_comb(list = c, nrow = 4)\r\n```\r\n\r\n### 2.4.2 Bar Plot\r\n\r\nBasically, bar plot follows the same rule as part 2.4.1 spatial map, only a few cases that needs to pay attention.\r\n\r\n```{r, fig.show='hide', fig.height=4, fig.width=7, results='hide'}\r\nb1 <- getPreciBar(tgridData, method = 'spring', output = 'ggplot')\r\nb2 <- getPreciBar(tgridData, method = 'summer', output = 'ggplot')\r\nb3 <- getPreciBar(tgridData, method = 'autumn', output = 'ggplot')\r\nb4 <- getPreciBar(tgridData, method = 'winter', output = 'ggplot')\r\n```\r\n\r\n```{r, fig.show='hold', fig.height=6, fig.width=7}\r\ngetPreciBar_comb(b1, b2, b3, b4, nrow = 2)\r\n```\r\n\r\n```{r, fig.show='hide', fig.height=4, fig.width=7, results='hide'}\r\nc <- lapply(1:12, function(x) getPreciBar(tgridData, method = x, output = 'ggplot') )\r\n```\r\n\r\n```{r, fig.show='hold', fig.height=6, fig.width=7}\r\ngetPreciBar_comb(list = c, nrow = 4)\r\n```\r\n\r\n## 3. Anarbe Case\r\n\r\nThe functions with anarbe case end with `_anarbe`, all of them are used to collect different available published data in anarbe catchment in Spain. The data comes from two website: [linked phrase](http://meteo.navarra.es/estaciones/mapadeestaciones.cfm) and [linked phrase](http://www4.gipuzkoa.net/oohh/web/esp/02.asp), there are precipitation or discharge data on those website, and can be downloaded directly. \r\n\r\nSince the available files on those website are arranged by a year or five years, for long term data collection, a tools is necessary for collecting data from different files.\r\n\r\n##### Note:\r\nFor excel files, if you have access to the dam regulation excel file of the dam anarbe, you can use  `collectData_excel_anarbe` in the package, but this function is commented in the original code, cannot be used directly. Go to original file in the library or go to github [linked phrase](https://github.com/Yuanchao-Xu/hyfo/blob/master/R/collectData_excel.R), copy the original code.\r\n\r\nThere are two csv files and txt files included in the package, which can be used as examples.\r\n\r\n```{r}\r\nfile <- system.file(\"extdata\", \"1999.csv\", package = \"hyfo\")\r\nfolder <- strsplit(file, '1999')[[1]][1]\r\n\r\na <- collectData_csv_anarbe(folder, output = TRUE)\r\nstr(a)\r\nb <- collectData_txt_anarbe(folder, output = TRUE)\r\nstr(b)\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}