{
    "contents" : "# \n#' An S4 class, representing the biasFactor of single time series biasCorrection.\n#' @slot biasFactor list of biasFactor, containing all the information for computing.\n#' @slot method the biascorrection method\n#' @slot preci if the data is precipitation\n#' @slot scaleType 'Valid when 'scaling' method is selected, 'multi' or 'add'.\n#' @slot extrapolate Valid when 'eqm' method is selected, 'constant' or 'no'\n#' @slot memberDim members contained.\n#' @slot prThreshold precipitation threshold, under which the precipitation is considered as 0.\n#' @exportClass biasFactor\n#' @importFrom methods setClass\nsetClass(\"biasFactor\", representation(biasFactor = 'list', method = 'character', preci = 'logical', prThreshold = 'numeric',\n                                                  scaleType = 'character', extrapolate = 'character', memberDim = 'numeric'), \n         validity = checkBiasFactor, \n         prototype(memberDim = 1))\n# \n# \n#' An S4 class, representing the biasFactor of hyfo file.\n#' @slot lonLatDim lists of biasFactor\n#' @inheritParams biasFactor\nsetClass(\"biasFactor.hyfo\", representation(lonLatDim = 'integer'), contains = 'biasFactor', \n         validity = checkBiasFactor.hyfo)\n\n\n\n\n\n\n# aa <- new('biasFactor', biasFactor = biasFactor[[1]], method = biasFactor$method, preci = biasFactor$preci, prThreshold = biasFactor$prThreshold,\n#          scaleType = biasFactor$scaleType, extrapolate = biasFactor$extrapolate)\n\n# a <- new('biasFactor.multiMember', biasFactor = biasFactor[[1]], memberDim = biasFactor$memberDim,\n#          method = biasFactor$method, preci = biasFactor$preci, prThreshold = biasFactor$prThreshold,\n#          scaleType = biasFactor$scaleType, extrapolate = biasFactor$extrapolate, input = biasFactor$input)\n# \n# a <- new('biasFactor.hyfo.multiMember', biasFactor = biasFactor[[1]], memberDim = biasFactor$memberDim, lonLatDim = biasFactor$lonLatDim,\n#          method = biasFactor$method, preci = biasFactor$preci, prThreshold = biasFactor$prThreshold,\n#          scaleType = biasFactor$scaleType, extrapolate = biasFactor$extrapolate, input = biasFactor$input)\n# \n\n\n\n\n\n\n\n##### For hyfo class\n\n###### hyfo\n\n# Since hyfo has to inateract with other packages like downscaleR,\n# If particular class is defined, other packages may not be able to use the object.\n# So, for grid file, just keep it the list file. In future, if interpolate is added,\n# grid file may become a special class.\n\n# \n# \n# \n# checkHyfo <- function(object) {\n#   errors <- character()\n#   if (length(object@varName) == 0) {\n#     msg <- 'hyfo must have a varName.'\n#     errors <- c(errors, msg)\n#   }\n#   \n#   if (length(object@xyCoords) != 2) {\n#     msg <- 'hyfo must have x and y coordinats, stored in xyCooords.'\n#     errors <- c(errors, msg)\n#   }\n#   \n#   if (length(object@Data) == 0) {\n#     msg <- 'hyfo must have a Data part, storing data.'\n#     errors <- c(errors, msg)\n#   } else {\n#     validDim <- na.omit(match(c('lon', 'lat', 'time'),attributes(object@Data)$dimensions))\n#     if (length(validDim) != 3) {\n#       msg <- paste('Data should have at least dimensions \"lon\", \"lat\", \"time\".', '\\n',\n#                    'Your input data has dimensions ', attributes(object@Data)$dimensions, sep = '')\n#       errors <- c(errors, msg)\n#     }\n#   }\n#   if (length(errors) == 0) TRUE else errors\n# }\n# \n# checkHyfo.multiMember <- function(object) {\n#   errors <- character()\n#   if (length(object@Members) == 0) {\n#     msg <- 'Members names missing.'\n#     errors <- c(errors, msg)\n#   }\n#   \n#   memDim <- match('member', attributes(object@Data)$dimensions)\n#   if (is.na(memDim)) {\n#     msg <- 'Members dimension missing.'\n#     errors <- c(errors, msg)\n#   }\n#   \n#   if (length(errors) == 0) TRUE else errors\n# }\n\n\n\n\n\n# #' An S4 class representing the grid file loaded from netCDF file.\n# #' @slot varName the name of the varialbe of the hyfo object.\n# #' @slot xyCoords A list file containing longitude and latitude coordinates.\n# #' @slot Dates A list containing Date information.\n# #' @slot Data An array containing the data.\n# #' @slot Loaded An character showing the loading information. \n# #' @exportClass \n# setClass(\"hyfo\", representation(varName = \"character\", xyCoords = 'list', Dates = 'list',\n#                                 Data = 'array', Loaded = 'character'),\n#          prototype(Loaded = 'by hyfo package, http://yuanchao-xu.github.io/hyfo/'),\n#          validity = checkHyfo)\n# \n# \n# #' An S4 class representing the multi-member grid file loaded from netCDF file.\n# #' @slot Members showing the name of the members.\n# #' @exportClass \n# setClass('hyfo.multiMember', representation(Members = 'array'), contains = 'hyfo',\n#          validity = checkHyfo.multiMember)\n\n\n\n\n# \n# a <- new(\"hyfo\", varName = \"pr\", xyCoords = tgridData$xyCoords, Dates = tgridData$Dates, Data = tgridData$Data)\n# \n# a <- new(\"hyfo.multiMember\", varName = \"pr\", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,\n#               Members = nc$Members, Loaded = nc$Loaded)\n\n",
    "created" : 1446229350238.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "3466314913",
    "id" : "D4CCEE99",
    "lastKnownWriteTime" : 1446235115,
    "path" : "E:/1/R/hyfo/R/classes.R",
    "project_path" : "R/classes.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}