{
    "collab_server" : "",
    "contents" : "#' Get annual rainfall of different rainfall time series\n#' \n#' Get annual rainfall of different raninfall time series.\n#' \n#' \n#' @param data A list containing different time series of different rainfall gauges. Or a dataframe with first column Date and the rest columns the value of different\n#' gauging stations. Usually an output of \\code{list2Dataframe}.\n#' @param output A string showing the output output.\n#' @param minRecords A number showing the minimum accept record number, e.g. for a normal \n#' year(365 days), if \\code{minRecords = 360}, it means if a year has less than 360 records\n#' of a year, it will be ignored in the mean annual value calculation. Only valid \n#' when \\code{output = \"mean\"}, default is 355.\n#' @param ... \\code{title, x, y} showing the title and x and y axis of the plot. e.g. \\code{title = 'aaa'}\n#' @return The annual rainfall and the number of missing data of each year and each rainfall gauge, which \n#' will also be plotted. If output \"mean\" is seleted, the mean annual rainfall will be returned.\n#' @details \n#' It is a generic function, if in your case you need to debug, please see \\code{?debug()} \n#' for how to debug S4 method.\n#' \n#' @examples\n#' #datalist is provided by the package as a test.\n#' data(testdl)\n#' a <- getAnnual(testdl)\n#' #set minRecords to control the calculation of annual rainfall.\n#' b <- getAnnual(testdl, output = 'mean', minRecords = 350)\n#' c <- getAnnual(testdl, output = 'mean', minRecords = 365)\n#' \n#' a1 <- extractPeriod(testdl, comm = TRUE)\n#' a2 <- list2Dataframe(a1)\n#' getAnnual(a2)\n#' \n#' a3 <- fillGap(a2)\n#' getAnnual(a3)\n#' \n#' \n#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/\n#' \n#' @export\n#' @importFrom methods setGeneric\n#' \n#' @references \n#' \\itemize{\n#' \\item H. Wickham. ggplot2: elegant graphics for data analysis. Springer New York, 2009.\n#' \\item Hadley Wickham (2007). Reshaping Data with the reshape Package. Journal of Statistical Software,\n#' 21(12), 1-20. URL http://www.jstatsoft.org/v21/i12/.\n#' \\item R Core Team (2015). R: A language and environment for statistical computing. R Foundation for\n#' Statistical Computing, Vienna, Austria. URL http://www.R-project.org/.\n#' }\n#' \n#' \nsetGeneric('getAnnual', function(data, output = 'series', minRecords = 355, \n                                 ...) {\n  standardGeneric('getAnnual')\n})\n\n#' @rdname getAnnual\n#' @importFrom methods setMethod\nsetMethod('getAnnual', signature('data.frame'), \n          function(data, output, minRecords, ...) {\n            result <- getAnnual.TS(data)\n            getAnnual.plot(result, output, minRecords, ...)\n            return(result)\n})\n\n#' @rdname getAnnual\n#' @importFrom methods setMethod\nsetMethod('getAnnual', signature('list'),\n          function(data, output, minRecords, ...) {\n            result <- getAnnual.list(data)\n            getAnnual.plot(result, output, minRecords, ...)\n            return(result)\n          })\n\n#' @importFrom data.table rbindlist\ngetAnnual.TS <- function(dataframe) {\n  Date <- as.POSIXlt(dataframe[, 1])\n  # Calculate how many gauging stations.\n  stations <- colnames(dataframe)[2:ncol(dataframe)]\n  \n  data <- lapply(stations, function(x) {\n    dataframe_new <- data.frame(Date, dataframe[, x])\n    colnames(dataframe_new)[2] <- x\n    getAnnual_dataframe(dataframe_new)\n  })\n  \n  data <- rbindlist(data)\n  #  After rbind, factor level has to be reassigned in order to be well plotted.\n  data$Year <- factor(data$Year, levels = sort(unique(data$Year)), ordered = TRUE)\n  rownames(data) <- NULL\n  \n  return(data)\n}\n\n\n#' @importFrom data.table rbindlist\ngetAnnual.list <- function(datalist) {\n  data <- lapply(datalist, FUN = getAnnual_dataframe)\n  data <- rbindlist(data)\n  #  After rbind, factor level has to be reassigned in order to be well plotted.\n  data$Year <- factor(data$Year, levels = sort(unique(data$Year)), ordered = TRUE)\n  rownames(data) <- NULL\n  return(data)\n}\n\n#' @import ggplot2 \n#' @importFrom reshape2 melt\n#' @importFrom stats aggregate\ngetAnnual.plot <- function(data, output, minRecords, ...) {\n  theme_set(theme_bw())\n  \n  if (output == 'mean') {\n    validData <- data[data$recordNum >= minRecords,]\n    \n    data <- aggregate(validData$AnnualPreci, list(validData$Name), mean)\n    colnames(data) <- c('Name', 'AnnualPreci')\n    \n    mainLayer <- with(data, {\n      ggplot(data)+\n        geom_bar(aes(x = Name, y = AnnualPreci, fill = Name), stat = 'identity')+\n        labs(empty = NULL, ...)#in order to pass \"...\", arguments shouldn't be empty.\n      \n    })\n    \n    print(mainLayer)\n    \n  } else {\n    \n    plotData <- with(data, {\n      subset(data, select = c(Year, Name, NANum, AnnualPreci))\n    })\n    \n    plotData <- melt(plotData, var.id = c('Year', 'Name'))\n    \n    \n    mainLayer <- with(plotData, {\n      ggplot(plotData) +\n        geom_bar(aes(x = Year, y = value , fill = Name), \n                 stat = 'identity') +\n        facet_grid(variable ~ Name, scale = 'free') +\n        xlab('Year') +\n        ylab(NULL) +\n        labs(empty = NULL, ...) +#in order to pass \"...\", arguments shouldn't be empty.\n        theme(plot.title = element_text(size = 20, face = 'bold', vjust = 1)) +\n        theme(axis.text.x = element_text(angle = 90, hjust = 1, size = rel(1.5)),\n              axis.text.y = element_text(size = rel(1.5)))\n      #      grid.arrange(mainLayer, ncol = 4)\n      \n    })\n    \n    \n    print(mainLayer)\n  }  \n}\n\n\n\n\n\n\n\n\n#' Get annual rainfall of the input time series.\n#' \n#' @param dataset A dataframe containing one time series, e.g., rainfall from one gauging station.\n#' the time should follow the format : \"1990-1-1\"\n#' @return The annual rainfall of each year of the input station.\n# @examples\n# data(testdl)\n# getAnnual_dataframe(testdl[[1]])\n#' \ngetAnnual_dataframe <- function(dataset) {\n  \n  if (!grepl('-|/', dataset[1, 1])) {\n    stop ('First column is not date or Wrong Date formate, check the format in ?as.Date{base},\n          and use as.Date to convert.')\n  }\n  Date <- as.Date(dataset[, 1])\n  year <- format(Date, '%Y')\n  yearUnique <- unique(year)\n  #  yearUnique <- factor(yearUnique, levels = yearUnique, ordered = TRUE)\n  calcuNum <- c(1:length(yearUnique))\n  \n  \n  annualPreci <- tapply(dataset[, 2], INDEX = year, FUN = sum, na.rm = TRUE)\n  recordNum <- tapply(dataset[, 2], INDEX = year, function(x) length(which(!is.na(x))))\n  NANum <- tapply(dataset[, 2], INDEX = year, function(x) length(which(is.na(x))))\n  \n  \n  name <- rep(colnames(dataset)[2], length(calcuNum))\n  output <- data.frame(Year = as.numeric(yearUnique), Name = name, AnnualPreci = annualPreci,\n                       recordNum, NANum)\n  \n  #output$Year <- factor(output$Year, levels = output$Year, ordered = TRUE)\n  return(output)\n}\n\n",
    "created" : 1483876618596.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "55111109",
    "id" : "BFF6AE7A",
    "lastKnownWriteTime" : 1487522555,
    "last_content_update" : 1487522555874,
    "path" : "~/GitHub/hyfo/R/getAnnual(generic).R",
    "project_path" : "R/getAnnual(generic).R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}