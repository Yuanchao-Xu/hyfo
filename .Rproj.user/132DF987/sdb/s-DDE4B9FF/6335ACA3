{
    "contents" : "#' plot time series, with marks on missing value.\n#' \n#' @param TS A time series in form of a dataframe.\n#' @param type A string representing the type of the time series, e.g. 'line' or 'bar'.\n#' @param output A string showing which type of output you want. Default is \"data\", if \"ggplot\", the \n#' data that can be directly plotted by ggplot2 will be returned, which is easier for you to make series\n#' plots afterwards. \n#' @param name If \\code{output = 'ggplot'}, name has to be assigned to your output, in order to differentiate\n#' different outputs in the later multiplot using \\code{plotTS_comb}.\n#' @param ... \\code{title, x, y} showing the title and x and y axis of the plot. e.g. \\code{title = 'aaa'},\n#' \\code{x = 'aaa'}, \\code{y = 'aaa'}\n#' \n#' @return A plot of the input time series.\n#' @examples\n#' plotTS(testdl[[1]])\n#' plotTS(testdl[[1]], x = 'xxx', y = 'yyy', title = 'aaa')\n#' \n#' \n#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/\n#' \n#' @references \n#' \\itemize{\n#' \\item H. Wickham. ggplot2: elegant graphics for data analysis. Springer New York, 2009.\n#' }\n#' \n#' @import ggplot2\n#' @export\nplotTS <- function(TS, type = 'line', output = 'data', name = NULL, ...) {\n  \n  \n  \n  # Check input\n  if (!grepl('-|/', TS[1, 1])) {\n    stop('First column is not date or Wrong Date formate, check the format in ?as.Date{base} \n         and use as.Date to convert.')\n  }\n  TS[, 1] <- as.Date(TS[, 1])\n  names <- colnames(TS)\n  colnames(TS) <- c('Date', 'value')\n  NAIndex <- which(is.na(TS[, 2]))\n  # assign 0 to NA values\n  TS[NAIndex, 2] <- 0\n  \n  \n  theme_set(theme_bw())\n  mainLayer <- with(TS, {\n    ggplot(data = TS) +\n      # It's always better to use colname to refer to\n      aes(x = Date, y = value) +\n      theme(plot.title = element_text(size = rel(1.8), face = 'bold'),\n            axis.text.x = element_text(size = rel(1.8)),\n            axis.text.y = element_text(size = rel(1.8)),\n            axis.title.x = element_text(size = rel(1.8)),\n            axis.title.y = element_text(size = rel(1.8)),\n            plot.title = element_text(size = rel(1.8), face = 'bold')) +\n      xlab(names[1]) +\n      ylab(names[2]) +\n      labs(empty = NULL, ...)\n  })\n  \n  #  color <- 'dodgerblue4'\n  if (type == 'bar') {\n    secondLayer <- with(TS, {\n      geom_bar(stat = 'identity')\n    })\n  } else if (type == 'line') {\n    secondLayer <- with(TS, {\n      geom_line()\n    })\n  } else {\n    stop(\"No such plot type.\")\n  }\n  \n  \n  missingVLayer <- with(TS, {\n    geom_point(data = TS[NAIndex, ], group = 1, size = 3, shape = 4, color = 'red')\n  })\n  plotLayer <- mainLayer + secondLayer + missingVLayer\n  \n  print(plotLayer) \n  \n  if (output == 'ggplot') {\n    if (is.null(name)) stop('\"name\" argument not found, \n                            If you choose \"ggplot\" as output, please assign a name.')\n    \n    TS$name <- rep(name, nrow(TS))     \n    TS$nav <- rep(0, nrow(TS))\n    TS$nav[NAIndex] <- 1\n    return(TS)\n  }\n  }\n\n\n\n\n#' Combine time seires plot together\n#' @param ... different time series plots generated by \\code{plotTS(, output = 'ggplot')}, refer to details.\n#' @details\n#' ..., representing different ouput file generated by \\code{plotTS(, output = 'ggplot'), name = yourname}, \n#' different names must be assigned when generating different output.\n#' \n#' e.g.\n#' a1, a2, a3 are different files generated by \\code{plotTS(, output = 'ggplot'), name = yourname}, you can\n#' set \\code{plotTS(a1,a2,a3)} or \\code{plotTS(list = list(a1,a2,a3))}\n#' \n#' @param nrow A number showing the number of rows.\n#' @param type A string showing 'line' or 'bar'.\n#' @param list If input is a list containing different ggplot data, use l\\code{list = inputlist}.\n#' @param x A string of x axis name.\n#' @param y A string of y axis name.\n#' @param title A string of the title.\n#' @param output A boolean, if chosen TRUE, the output will be given.\n#' NOTE: yOU HAVE TO PUT A \\code{list = }, before your list.\n#' @return A combined time series plot.\n#' @examples\n#' a1 <- plotTS(testdl[[1]], output = 'ggplot', name = 1)\n#' a2 <- plotTS(testdl[[2]], output = 'ggplot', name = 2)\n#' \n#' plotTS_comb(a1, a2)\n#' plotTS_comb(list = list(a1, a2), y = 'y axis', nrow = 2)\n#' \n#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/\n#' \n#' @references \n#' \\itemize{\n#' \\item H. Wickham. ggplot2: elegant graphics for data analysis. Springer New York, 2009.\n#' }\n#' @export\n#' @import ggplot2\nplotTS_comb <- function(..., nrow = 1, type = 'line', list = NULL, x = 'Date', y = '', title = '', \n                        output = FALSE){\n  if (!is.null(list)) {\n    data_ggplot <- do.call('rbind', list)\n  } else {\n    \n    bars <- list(...)\n    checkBind(bars, 'rbind')\n    data_ggplot <- do.call('rbind', bars)\n  }\n  \n  if (!class(data_ggplot) == 'data.frame') {\n    warning('Your input is probably a list, but you forget to add \"list = \" before it.\n            Try again, or check help for more information.')\n  } else if (is.null(data_ggplot$name)) {\n    stop('No \"Name\" column in the input data, check the arguments in getPreciBar(), if \n         output = \"ggplot\" is assigned, more info please check ?getPreciBar.')\n  }\n  \n  \n  theme_set(theme_bw())\n  mainLayer <- with(data_ggplot, {\n    ggplot(data = data_ggplot) +\n      # It's always better to use colname to refer to\n      aes(x = Date, y = value) +\n      theme(plot.title = element_text(size = rel(1.8), face = 'bold'),\n            axis.text.x = element_text(angle = 90, hjust = 1, size = rel(1.8)),\n            axis.text.y = element_text(size = rel(1.8)),\n            axis.title.x = element_text(size = rel(1.8)),\n            axis.title.y = element_text(size = rel(1.8))) +\n      geom_point(data = data_ggplot[data_ggplot$nav == 1, ], size = 2, shape = 4, color = 'red') +\n      facet_wrap( ~ name, nrow = nrow) +\n      labs(x = x, y = y, title = title)\n    \n  })\n  \n  \n  if (type == 'bar') {\n    secondLayer <- with(data_ggplot, {\n      geom_bar(stat = 'identity', size = 1)\n    })\n  } else if (type == 'line') {\n    secondLayer <- with(data_ggplot, {\n      geom_line(size = 1)\n    })\n  } else {\n    stop(\"No such plot type.\")\n  }\n  \n  print(mainLayer + secondLayer)\n  \n  if (output == TRUE) return(data_ggplot)\n  }\n\n\n\n\n#' get L moment analysis of the input distribution\n#' \n#' @param dis A distribution, for hydrology usually a time series with only data column without time.\n#' @return The mean, L-variation, L-skewness and L-kurtosis of the input distribution\n#' @examples\n#' dis <- seq(1, 100)\n#' getLMom(dis)\n#' \n#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/\n#' \n#' @export\n#' @references \n#' \n#' \\itemize{\n#' \\item J. R. M. Hosking (2015). L-moments. R package, version 2.5. URL:\n#' http://CRAN.R-project.org/package=lmom.\n#' }\n#' \n#' \n#' @importFrom lmom samlmu\n#' \ngetLMom <- function(dis){\n  \n  LMom <- samlmu(dis, nmom = 4, ratios = TRUE)\n  \n  mean <- LMom[1]\n  LCV <- LMom[2]/LMom[1]\n  Lskew <- LMom[3]\n  Lkur <- LMom[4]\n  \n  output <- data.frame(mean = mean, Lcv = LCV, Lskew = Lskew, Lkur = Lkur)\n  return(output)\n}\n\n#' get moment analysis of the input distribution\n#' \n#' @param dis A distribution, for hydrology usually a time series with only data column without time.\n#' @return The mean, variation, skewness and kurtosis of the input distribution\n#' @examples\n#' dis <- seq(1, 100)\n#' getMoment(dis)\n#' \n#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/\n#' \n#' @export\n#' @references \n#' \n#' \\itemize{\n#' \\item Lukasz Komsta and Frederick Novomestky (2015). moments: Moments, cumulants, skewness, kurtosis and\n#' related tests. R package version 0.14. http://CRAN.R-project.org/package=moments\n#' \n#' \\item R Core Team (2015). R: A language and environment for statistical computing. R Foundation for\n#' Statistical Computing, Vienna, Austria. URL http://www.R-project.org/.\n#' }\n#' \n#' @importFrom moments skewness kurtosis\n#' @importFrom stats var\ngetMoment <- function(dis) {\n  mean <- mean(dis, na.rm = TRUE)\n  variance <- var(dis, na.rm = TRUE)\n  skewness <- skewness(dis, na.rm = TRUE)\n  kurtosis <- kurtosis(dis, na.rm = TRUE)\n  \n  output <- data.frame(mean=mean, Variance = variance, Skewness = skewness, Kurtosis = kurtosis)\n  \n  return(output)\n}\n",
    "created" : 1443449735095.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "2803475665",
    "id" : "6335ACA3",
    "lastKnownWriteTime" : 1443537692,
    "path" : "C:/Users/xyc/Desktop/test.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}