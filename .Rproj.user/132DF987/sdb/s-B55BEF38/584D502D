{
    "contents" : "#' Analyze time series with different method.\n#' @param TS A time series with first column the Date.\n#' @param method A string showing the method used to calculate mean value, e.g., \"annual\".\n#' more information please refer to details.\n#' @param omitNA A boolean showing in the calculation, whether NA is omitted, default is TRUE.\n#' @param output A character representing the output type, if you want to use \\code{analyzeTS_comb}\n#' to combine different output from this function, you can choose \\code{output = 'ggplot'}, if not\n#' assigned, normal data array will be returned.\n#' @param ..., \\code{title, x, y} showing the title and x and y axis of the plot, shoud be a string.\n#' @details\n#' There are following methods to be selected, \n#' \"annual\": annual rainfall of each year is plotted.  \n#' \"winter\", \"spring\", \"autumn\", \"summer\": seasonal rainfall of each year is plotted.\n#' Month(number 1 to 12): month rainfall of each year is plotted, e.g. march rainfall of each year.\n#' \n#' Since \"winter\" is a crossing year, 12, 1, 2, 12 is in former year, and 1, 2 are in latter year.\n#' so winter belongs to the latter year.\n#' \n#' @return The annual/monthly/seasonal analysis of the input time series.\n#' @examples\n#' \n#' data(testdl)\n#' TS  <- testdl[[1]]\n#' \n#' # Get the mean spring precipitation.\n#' a <- analyzeTS(TS, method = 'spring')\n#' a <- analyzeTS(TS, method = 'spring', omitNA = FALSE)\n#' \n#' \n#' a <- analyzeTS(TS, method = 'winter')\n#' a\n#' # Get special month precipitation, e.g. march.\n#' a <- analyzeTS(TS, method = 3)\n#' a\n#' \n#' # We can also get annual precipitation.\n#' a <- analyzeTS(TS, method = 'annual')\n#' a\n#'\n#' @export\nanalyzeTS <- function (TS, method, omitNA = TRUE, output = 'data', ...) {\n  Date <- as.POSIXlt(TS[, 1])\n  year <- Date$year + 1900\n  mon <- Date$mon + 1\n  \n  \n  \n  data <- getMeanPreci(TS[, 2], yearIndex = year, monthIndex = mon, \n                         method = method, omitNA = omitNA, plot = TRUE, fullResults = TRUE)\n  \n  if (output == 'ggplot') {\n    data <- data.frame(Date = names(data), value = data, name = method)\n    \n  }\n  \n  return(data)\n}\n \n\n\n\n#' Combine rainfall analysis together, to generate multiplot.\n#' @param ... different barplots generated by \\code{analyzeTS(, output = 'ggplot')}, refer to details.\n#' @details\n#' ..., representing different ouput generated by \\code{analyzeTS(, output = 'ggplot')}, they \n#' have to be of the same type, e.g., \n#' 1. Jan precipitation of different years, Feb precipitation of different years, and... \n#' They are both monthly precipitation, and they share x axis.\n#' \n#' 2. Mean monthly precipitation of different dataset. e.g., long term mean monthly precipitation\n#' and short term mean monthly precipitation. They are both mean monthly precipitation.\n#' \n#' @param nrow A number showing the number of rows.\n#' @param list If input is a list containing different ggplot data, use l\\code{list = inputlist}.\n#' NOTE: yOU HAVE TO PUT A \\code{list = }, before your list.\n#' @return A combined barplot of the analysis.\n#' @examples\n#' \n#' data(testdl)\n#' TS  <- testdl[[1]]\n#' \n#' #output type of analyzeTS() has to be 'ggplot'.\n#' a <- analyzeTS(TS, method = 'spring', output = 'ggplot')\n#' b <- analyzeTS(TS, method = 'summer', output = 'ggplot')\n#' \n#' analyzeTS_comb(a, b)\n#' \n#' \n#' \n#' a <- analyzeTS(TS, method = 3, output = 'ggplot')\n#' b <- analyzeTS(TS, method = 4, output = 'ggplot')\n#' analyzeTS_comb(a, b)\n#' \n#' @export\n#' @import ggplot2\nanalyzeTS_comb <- function (..., list = NULL, nrow = 1) {\n  if (!is.null(list)) {\n    data_ggplot <- do.call('rbind', list)\n  } else {\n    \n    bars <- list(...)\n    checkBind(bars, 'rbind')\n    data_ggplot <- do.call('rbind', bars)\n  }\n  if (!class(data_ggplot) == 'data.frame') {\n    warning('Your input is probably a list, but you forget to add \"list = \" before it.\n            Try again, or check help for more information.')\n  }\n  \n  data_ggplot$Date <- factor(data_ggplot$Date, levels = sort(unique(data_ggplot$Date)), ordered = TRUE)\n  data_ggplot$name <- factor(data_ggplot$name, levels = data_ggplot$name, ordered = TRUE)\n  \n  theme_set(theme_bw())\n  \n  mainLayer <- with(data_ggplot, {\n    ggplot(data_ggplot)+\n      geom_bar(aes(x = Date, y = value),fill = 'cyan', stat = 'identity', colour = 'black', width = .6)+\n      facet_wrap( ~ name, nrow = nrow) +\n      theme(axis.text.x = element_text(angle = 90, hjust = 1))\n  })\n  \n  print (mainLayer)\n  \n} \n  \n  \n  \n#' get L moment analysis of the input distribution\n#' \n#' @param dis A distribution, for hydrology usually a time series with only data column without time.\n#' @return The mean, L-variation, L-skewness and L-kurtosis of the input distribution\n#' @examples\n#' dis <- seq(1, 100)\n#' getLMom(dis)\n#' @export\n#' @importFrom lmom samlmu\n#' \ngetLMom <- function(dis){\n  \n  LMom <- samlmu(dis, nmom = 4, ratios = TRUE)\n  \n  mean <- LMom[1]\n  LCV <- LMom[2]/LMom[1]\n  Lskew <- LMom[3]\n  Lkur <- LMom[4]\n  \n  output <- data.frame(mean = mean, Lcv = LCV, Lskew = Lskew, Lkur = Lkur)\n  return(output)\n}\n\n#' get moment analysis of the input distribution\n#' \n#' @param dis A distribution, for hydrology usually a time series with only data column without time.\n#' @return The mean, variation, skewness and kurtosis of the input distribution\n#' @examples\n#' dis <- seq(1, 100)\n#' getMoment(dis)\n#' @export\n#' @importFrom moments skewness kurtosis\n#' @importFrom stats var\ngetMoment <- function(dis) {\n  mean <- mean(dis, na.rm = TRUE)\n  variance <- var(dis, na.rm = TRUE)\n  skewness <- skewness(dis, na.rm = TRUE)\n  kurtosis <- kurtosis(dis, na.rm = TRUE)\n  \n  output <- data.frame(mean=mean, Variance = variance, Skewness = skewness, Kurtosis = kurtosis)\n  \n  return(output)\n}\n",
    "created" : 1438604499527.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "1696371319",
    "id" : "584D502D",
    "lastKnownWriteTime" : 1438607924,
    "path" : "~/hyfo/R/analyzeTS.R",
    "project_path" : "R/analyzeTS.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}