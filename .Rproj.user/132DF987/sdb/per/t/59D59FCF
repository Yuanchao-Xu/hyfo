{
    "contents" : "\n\n\n#######################\n## Input information ##\n#######################\n\n\nlibrary(ncdf)\nlibrary(raster)\n\n\n\n## Volta extent\nlonmin = -5.27618837406 #args[3])\nlonmax = 2.23131942798 #args[4])\nlatmin = 5.76291322708 #args[5])\nlatmax = 14.8879776001 #args[6])\n\nsource(\"C:/Temp/CFSv2_operational/Scripts/saveRasterStack2ncdf.r\")\n\n\n###############################\n## For every day of the year ##\n###############################\n\n#!!! add a loop here\ntof_day = \"01\"\ntof_month = \"07\"\ntof_year = \"2015\"\n\n####################################\n## Get Hindcast data for this TOF ##\n####################################\n\ninputFolder = \"Z:/01_NOAA_Historical_Data/6-hourly_data\"\noutputFolder = \"c:/Temp/CFSv2_operational/Output\"\npath2wgrib = \"C:/Temp/wgrib/wgrib2.exe\"\n\n\nyears= c(2001:2009)\nFCSTStack = NULL\ntimeStack = NULL\nfor(year in years)\n{\n  # TOF = initialisation date\n  tof = as.POSIXct(paste(year,tof_month,tof_day,  sep = '-'), tz = 'UTC')\n  # get the forecast of the last 20 days (20 members)\n  members = seq(from = tof, by = \"-1 day\", length.out = 20)\n  \n  for(i in 1:20)\n  {\n    sHour = format(members[i], \"%H\")\n    sYear = format(members[i], \"%Y\") \n\n    # Netcdf input path\n    sMonth = format(members[i], \"%m\")\n    sDay = format(members[i], \"%d\")\n    endDate = as.POSIXlt(members[i])\n    endDate$mon = endDate$mon + 4\n    eYear = format(endDate, \"%Y\") \n    eMonth = format(endDate, \"%m\")\n    eDay = '01' #format(members[1], \"%d\") # always same day as TOF (member 1)\n\n#     else # 45 days forecast -> +45 days\n#     {\n#       sMonth = format(members[i], \"%m\") # same month as TOF\n#       sDay = format(members[i], \"%d\")  # same day as TOF\n#       endDate = as.POSIXlt(members[i])\n#       endDate$mday = endDate$mday + 45\n#       eYear = format(endDate, \"%Y\") \n#       eMonth = format(endDate, \"%m\")\n#       eDay = format(endDate, \"%d\")\n#     }\n\n    \n    filename_grb = paste(\"prate_f.01\", paste(sYear,sMonth, sDay, sHour, sep = ''),paste(eYear, eMonth, eDay, sHour, sep = ''),paste(sYear,sMonth, sDay, sHour, sep = ''), \"grb2\", sep = '.')\n    inputPath = paste(inputFolder, paste0(sYear,sMonth), filename_grb, sep = '/')\n                      \n    outputPath =  paste(outputFolder, paste(sYear,sMonth,sDay,\"_member_\",i, \".nc\", sep = ''), sep = '/') #args[1]\n    \n    ### convert to NetCDF file\n    \n    commandline = paste(path2wgrib, inputPath, \"-netcdf\", outputPath, sep = \" \")\n    statusExe = system(commandline)\n    print(statusExe)\n    \n    ### crop and change unit\n    \n    # read in netcdf time information\n    ncid = open.ncdf(outputPath)\n    \n    Origin = att.get.ncdf(ncid, varid = 'time', attname = 'units')\n    #Calendar = att.get.ncdf(ncid, varid = 'time', attname = 'calendar')\n    timeStack = append(timeStack, get.var.ncdf(ncid, varid = 'time'))\n    s = unlist(strsplit(Origin$value, split = ' '))\n    \n    if(is.null(FCSTStack))\n    {\n      outputPath_crop = paste(strsplit(outputPath,\".nc\"), \"crop.nc\", sep = \"_\")\n      FCSTStack = crop(stack( x= outputPath, varname = 'PRATE_surface'), extent(lonmin, lonmax, latmin, latmax))\n    }\n    else\n    {\n      FCSTStack = addLayer(FCSTStack, crop(stack( x= outputPath, varname = 'PRATE_surface'), extent(lonmin, lonmax, latmin, latmax)))\n    }\n\n    # close and delete the global nc file (only keep the cropped file)\n    close.ncdf(ncid)\n    file.remove(outputPath)\n    unlink(outputPath, recursive=TRUE)\n  }\n  FCSTStack <- FCSTStack*86400 # converts from mm/s to mm/d\n  #FCSTStack # Raster stack of the hindcast for this year and given TOF\n  #timeStack # associated timestack\n  \n  \n  #!! 20 members can be averaged here \n  \n}\n\n\n#######################################\n## Get Observation data for this TOF ##\n#######################################\n\ninputPath = \"c:/Temp/CFSv2_operational/Input/obs/\" # \\\\NCR607\\Seasonal_Forecast_Data\\00_Observations\\GlobalTRMM\n\nyears= c(2001:2009)\nresampledStack.OBS <- NULL\nresampledTimeStack.OBS <- NULL\n\nfor (year in years)\n{\n  sYear = year\n  print(sYear)\n  ncPath = paste0(inputPath, \"TRMM_\")\n  ncPath = paste0(ncPath, sYear)\n  ncPath = paste0(ncPath, \".nc\")\n  print(ncPath)\n  \n  # read in netcdf time information\n  ncid = open.ncdf(ncPath)\n  \n  rasterStack = stack(x= ncPath, varname = 'TRMM_daily_rainfall')\n  rasterStack = crop(rasterStack, extent(lonmin, lonmax, latmin, latmax))\n  \n  timeStack = get.var.ncdf(ncid, varid = 'time')\n  ncOrigin = att.get.ncdf(ncid, varid = 'time', attname = 'units')\n  ncCalendar = att.get.ncdf(ncid, varid = 'time', attname = 'calendar')\n  s = unlist(strsplit(ncOrigin$value, split = ' '))\n  \n  if(!is.null(resampledStack.OBS)) {\n    resampledStack.OBS = addLayer(resampledStack.OBS, rasterStack)\n  }else resampledStack.OBS <- rasterStack\n  \n  resampledTimeStack.OBS <- append(resampledTimeStack.OBS, timeStack)\n  close.ncdf(ncid)\n}\n\n\n\n\n\n\n\n\n\n\n#     ############################\n#     ## Write Output to netcdf ##\n#     ############################\n#     \n#   \n#   FillValue = 1E30\n#   \n#   variableName = 'pr'\n#   varlongname = 'NCEP CFSv2'\n#   varunit = 'mm/day'\n#   Contact = ''\n#   Title = 'CFS'\n#   Comment = 'CFS'\n#   save.image(\"c:/Temp/CFSv2_operational/Output/test4.RData\")\n#   \n#   # save to netcdf file in 'CF-1.6' format\n#   saveRasterStack2ncdf(outputPath_crop, rasterStack = resampledStack, variableName = variableName, varlongname = varlongname, unitName = varunit,\n#                        time = resampledTimeStack, origin = Origin$value, calendar = 'standard', FillValue = FillValue,\n#                        title = Title, comment = Comment, contact = Contact)\n#   \n# \n#   \n#   print(paste0(\"Historical forecast successfully processed: \", outputPath))",
    "created" : 1443014792566.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "4150633253",
    "id" : "59D59FCF",
    "lastKnownWriteTime" : 1443022328,
    "path" : "C:/Users/xyc/Desktop/ProcessHistoricalForecasts.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}