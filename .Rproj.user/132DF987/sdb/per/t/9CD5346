{
    "contents" : "#require(ncdf)\nsource(\"C:\\\\DHI_Projects\\\\11811405\\\\Seasonal_Forecasting\\\\R\\\\Data_Analysis\\\\Main.R\")\n\nfilePath <- file.choose()\n#a <- open.ncdf(filePath)\n#a1 <- get.var.ncdf(a,varid = 'pre')\n#write(a1,'C:\\\\DHI_Projects\\\\11811405\\\\Seasonal_Forecasting\\\\Data\\\\spain02Pr\\\\pre.txt',ncol=1)\n# for GRU data, catchment, latLim= c(42.8,44.5) , lonLim=c(-2.4,-1.5)\nb <- loadGridData(filePath, \"pr\", year = 2005:2007,latLim= c(43,44.5) , lonLim=c(-2.4,-0.5) , season = NULL, dictionary=FALSE)\nb <- loadGridData(filePath, \"pr\", year = 2005:2007,latLim= c(36,43.8) , lonLim=c(-9.2,4.4) , season = NULL, dictionary=FALSE)\n\n\nfrc <- loadECOMS(dataset = \"System4_seasonal_15\", var = \"tp\", members = 1:5, \n                 lonLim = c(-2.4,-1.5), latLim = c(42.8,44.5), season = c(12,1,2), years = 1999:2008, leadMonth = 2, time = \"DD\")\n\n\n\ndata1 <- getSpatialMap(b, method = 'meanAnnual',outputData = T, plotScale = 'sqrt',catchment = NULL, points = NULL)\n\n\n\ndata2 <- getPreciBar(b,'meanMonthly',outputData = T,plotRange = T)\n\n\n\na <- data.frame(mon = month.abb[1:12],value = data2)\na$mon <- factor(a$mon,levels=a$mon,ordered=T)\n\np <- ggplot(a)+\n  geom_bar(aes(x=mon,y=value),stat='identity')\nprint (p)\n\n\n\n## GIS reading\n\nfilePath <- file.choose()\nstations <- read.table(filePath, header = T, sep = ',') \nstations <- stations[,c(3,7,8,9,10)]\n\npoints <- data.frame(name = stations[,1], lon = stations[,3], lat = stations[,4], z = stations[,5], value = stations[,2])\n\nmainLayer <- ggplot(points)+\n  geom_point(aes(x = lon, y = lat, size = value, colour = z))+\n  scale_colour_gradientn(colours = c('blue','black'))\nprint (mainLayer)\n\n\n##ggplot map\nx <- data1\ncolnames(x) <- round(lon,2)\nrownames(x) <- round(lat,2)\n\nworld_map <- map_data('world')\n\ntheme_set(theme_bw())\np <- ggplot(data = melt(x))\np + geom_tile(aes(x=Var2,y=Var1,fill = value))+\n  scale_fill_gradientn(colours = c('yellow','orange','red'),na.value='transparent',trans='sqrt')+\n  geom_map(data = world_map,map=world_map,aes(map_id=region),fill='transparent',color='black')+\n  guides(fill=guide_colorbar(title='Rainfall (mm)'))+\n  xlab('adfafda')+\n  ylab('dafdafa')+\n  ggtitle('dafdadfafa')+\n  theme(plot.title=element_text(size=30,face='bold'))+\n  geom_text(x=min(lon)+0.75*(max(lon)-min(lon)),y=40,label='dasfafd')+\n  geom_polygon(data=c,aes(long,lat,group=group),color='black',fill='transparent')\n\n\n####################### Getting catchment\n\na <- catchment\na@data$id <- rownames(a@data)\nb <- fortify(a,region='id')\nc <- join(b,a@data,by='id')\n\nfilePath <- file.choose()\ncatName <- tail(strsplit(filePath,'\\\\\\\\')[[1]],1)#needs to be four \\, caused by some window system problem\ncatName1 <- strsplit(catName,'\\\\.')[[1]][1]\ncatName2 <- paste('\\\\\\\\',catName, sep = '')\nfolderName <- strsplit(filePath,catName2)[[1]]\ncatchment <- rgdal::readOGR(folderName,catName1)\nplot(catchment,add = TRUE)\n\nfilePath <- file.choose()\na <- read.table(filePath, header = T)\n\n\n############################### test\n\n\n#'@import ncdf\nloadNcdf <- function(filePath, varname) {\n  nc <- open.ncdf(filePath)\n  \n  var <- nc$var\n   # Use name to locate the variable\n  call_1 <- as.call(c(\n     list(as.name('$'), var, varname)\n  ))\n  var <- eval(call_1)\n  if(is.null(var)) stop('No such variable name, check source file.')\n  \n  # First needs to identify the variable name, load the right data\n  message('Loading data...')\n  nc_data <- get.var.ncdf(nc, var)\n  message('Processing...')\n\n  dimNames <- unlist(lapply(1:length(var$dim), function(x) var$dim[[x]]$name))\n  \n  # Only deals with the most common dimensions, futher dimensions will be added in future.\n  dimIndex <- match(c('lon', 'lat', 'time', 'member'), dimNames)\n  \n  gridData <- list()\n  gridData$Variable$varName <- varname\n  gridData$xyCoords$x <- var$dim[[dimIndex[1]]]$vals\n  gridData$xyCoords$y <- var$dim[[dimIndex[2]]]$vals\n  \n  # Time part needs to be taken seperately\n  DateDiff <- var$dim[[dimIndex[3]]]$vals\n  # To get real time, time since when has to be grabbed from the dataset.\n  timeSince <- as.POSIXlt(strsplit(var$dim[[dimIndex[3]]]$units, split = 'since')[[1]][2])\n  Date <- rep(timeSince, length(DateDiff))\n  Date$mday <- Date$mday + DateDiff\n  gridData$Dates$start <- as.character(Date)\n  \n  # Assing data to grid data\n  gridData$Data <- nc_data\n  attributes(gridData$Data)$dimensions <- dimNames\n  \n  if (!is.na(dimIndex[4])) gridData$Members <- var$dim[[dimIndex[4]]]$vals\n  \n  \n  return(gridData)\n  \n}\n\n\n\n#'@import ncdf\nwriteNcdf <- function(gridData, filePath) {\n  \n  name <- gridData$Variable$varName\n  # First defines dimensions.\n  dimLon <- dim.def.ncdf('lon', 'degree', gridData$xyCoords$x)\n  dimLat <- dim.def.ncdf('lat', 'degree', gridData$xyCoords$y)\n  dimMem <- NULL\n  if (!is.null(gridData$Members)) {\n    dimMem <- dim.def.ncdf('member', 'members', 1:length(gridData$Members))\n  }\n  \n  \n  # Time needs to be treated seperately\n  dates <- as.POSIXlt(gridData$Dates$start)\n  time <- difftime(dates, dates[1], units = 'days')\n  timeUnits <- paste('days since', dates[1])\n  dimTime <- dim.def.ncdf('time', timeUnits, time)\n  \n  \n  \n  # Depending on whether there is a member part of the dataset.\n  \n  dimList <- list(dimLon, dimLat, dimTime, dimMem)\n  # delete the NULL list, in order that there is no member part in the data.\n  dimList <- Filter(Negate(is.null), dimList)\n  # Then difines data\n  var <- var.def.ncdf( name, \"units\", dimList, 1e20 )\n  \n  nc <- create.ncdf(filePath, var)\n  \n#   This part comes from the library downscaleR\n#   att.put.ncdf(nc, \"time\", \"standard_name\",\"time\")\n#   att.put.ncdf(nc, \"time\", \"axis\",\"T\")\n#   att.put.ncdf(nc, \"time\", \"_CoordinateAxisType\",\"Time\")\n#   #att.put.ncdf(nc, \"time\", \"_ChunkSize\",1)\n#   att.put.ncdf(nc, \"lon\", \"standard_name\",\"longitude\")\n#   att.put.ncdf(nc, \"lon\", \"_CoordinateAxisType\",\"Lon\")\n#   att.put.ncdf(nc, \"lat\", \"standard_name\",\"latitude\")\n#   att.put.ncdf(nc, \"lat\", \"_CoordinateAxisType\",\"Lat\")\n  \n  att.put.ncdf(nc, 0, \"Conventions\",\"CF-1.4\")\n  \n  dimIndex <- match(c('lon', 'lat', 'time', 'member'), attributes(gridData$Data)$dimensions)\n  dimIndex <- na.omit(dimIndex)\n  data <- aperm(gridData$Data, dimIndex)\n  put.var.ncdf(nc, name, data)\n  close.ncdf(nc)\n  \n}\n\n#'@import ncdf\ngetExtralDim <- function(...) {\n  dimList <- list(...)\n  \n  \n}\n\n\n#################################  test \n\n",
    "created" : 1437681123782.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "292240725",
    "id" : "9CD5346",
    "lastKnownWriteTime" : 1438368833,
    "path" : "C:/DHI_Projects/11811405/Seasonal_Forecasting/R/test.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}