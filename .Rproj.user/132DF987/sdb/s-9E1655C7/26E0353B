{
    "contents" : "---\ntitle: \"hyfo Easy Start\"\nauthor: \"Yuanchao Xu\"\ndate: \"`r Sys.Date()`\"\noutput: \n  rmarkdown::html_vignette\n\nvignette: >\n  %\\VignetteIndexEntry{hyfo easy start}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{ASCII}\n---\n##### hyfo is designed for hydrology and forecasting anaylasis, containing a number of tools including data extration, data processing and data visulization. There are two main parts in the package, as well as in this mannual:\n\n1. Hydrology\n* Providing tools from raw data extration to final precipitation data used by model.\n* e.g., data extraction from file, precipitation gap filler, annual precipitation calculation.\n\n2. Forecasting\n* Providing tools from forecasting data visulization and analysis.\n* e.g., get spatial maps, data analysis and bias analysis.\n\n## Note\n\n* For the forecasting tools part, `hyfo` mainly focuses on the post processing of the gridData derived from forecasts or other sources. The input is a list file, usually a result from  `loadGridData{ecomsUDG.Raccess}` or `loadECOMS{ecomsUDG.Raccess}`. Pacakage`{ecomsUDG.Raccess}`is designed for getting access to different dataset, and also can load grid file (like netcdf file) directly.\n\n* The functions end with `_anarbe` are the functions designed specially for some case in Spain, those functions mostly are about data collection of the anarbe catchment, which will be introduced in the end fo this mannual.\n\n## 1. Hydrology\n\nIf you are an experienced R user, and know how to read data in R, deal with dataframe, generate date and list, please start from next charpter, \"1.2 Rainfall Analysis\"\n\n### 1.1 Data Preparation\n\n#### 1.1.1 Frome File\n\n`hyfo` does provide a common tool for collecting data from different type of files, including \"txt\", \n\n\"csv\" and \"excel\", which has to be assigned to the argument `fileType`.\n\nNow let's use internal data as an example.\n```{r, fig.show='hold'}\n\nlibrary(hyfo)#load the package.\n\nfile <- system.file(\"extdata\", \"1999.csv\", package = \"hyfo\")\n# get the folder containing different csv (or other type) files.\nfolder <- strsplit(file, '1999')[[1]][1] \n\n# Extract and combine content from different files and in each file, the extracted zone is \n# from row 10 to row 20, Column 1 to column2.\na <- collectData(folder, fileType = 'csv', range = c(10, 20, 1,2))\nstr(a)\n```\n\n`a` cannot be directly inputed in `hyfo`, it still needs some process.\n```{r, fig.show = 'hold', fig.height = 4, fig.width = 7}\n# Check the date to see if it follows the format in ?as.Date(), if not, \n# use as.Date to convert. \na <- data.frame(a)\n#get date\ndate <- a[, 1]\n\n# The original format is d/m/year, convert to formal format.\ndate <- as.Date(date, format = '%d/%m/%Y')\na[, 1] <- date\n\n# Now a has become `a` time series dataframe, which is the atom element of the analysis. \n#`hyfo` deals with list containing different time series dataframe. In this example, \n#there is only one dataframe, and more examples please refer to the following chapter.\ndatalist <- list(a)\n\n# Use getAnnual as an example, here since `a` is not a complete time series, \n# the result is only base on the input.\n# getAnnual gives the annual precipitation of each year, \n# and will be introduced in the next chapter.\ngetAnnual(datalist)\n```\n\n#### 1.1.2 Mannually\n\nFollowing example shows a simple way to generate dataframe with start date, end date, and the value. Here in the example, `sample()` is used to generate random values, while in real case it will be a vector containing time series values.\n```{r, fig.show = 'hold', fig.height = 4, fig.width = 7}\n# Generate timeseries datalist. Each data frame consists of a Date and a value.\nAAA <- data.frame(\n  Date = seq(as.Date('1990-10-28'), as.Date('1997-4-1'), 1), # Date column\n  AAA = sample(1:10, length(seq(as.Date('1990-10-28'), # value column\n                                as.Date('1997-4-1'), 1)), repl = TRUE))\n\nBBB <- data.frame(\n  Date = seq(as.Date('1993-3-28'), as.Date('1999-1-1'),1), \n  BBB = sample(1:10, length(seq(as.Date('1993-3-28'), \n                                as.Date('1999-1-1'),1)), repl = TRUE))\n\nCCC <- data.frame(\n  Date = seq(as.Date('1988-2-2'), as.Date('1996-1-1'),1), \n  CCC = sample(1:10, length(seq(as.Date('1988-2-2'), \n                                as.Date('1996-1-1'),1)), repl = TRUE)) \n\ndatalist <- list(AAA, BBB, CCC)# dput() and dget() can be used to save and load list file.\na <- getAnnual(datalist)\n```\n\n### 1.2 Rainfall Analysis\n\nAssuming we have three gauging stations named \"AAA\", \"BBB\", \"CCC\", the precipitation information can be get by the following:\n```{r, fig.show='hold', fig.height=4, fig.width=7}\n# testdl is a datalist provided by the package as a test. \n# It's a list containing different time series.\ndata(testdl)\na <- getAnnual(testdl)\n```\n\nAs shown above, the annual precipitation and the number of missing values are shown in the figure. Knowing how many missing values you have is alway important when calculating the mean annual precipitation. \n\nNow we want to get the mean annual precipitation.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\na <- getAnnual(testdl, output = 'mean')\na\n```\n\nMean annual precipitation is calculated, but as we can see in the figure before, it's not reliable, since there are a lot of missing values in AAA and CCC, especially in AAA, in 1993, there are more than 30 missing values in a year. So we have to decide which is the threshold for the valid record. the default is 355, which means in a year (355 or 365 days), if the valid records (not missing) exceeds 355, then this year is taken into consideration in the mean annual preicipitation calculation.\n```{r, fig.show='hold', fig.height=3, fig.width=3}\ngetAnnual(testdl, output = 'mean', minRecords = 300)\ngetAnnual(testdl, output = 'mean', minRecords = 365)\n```\n\nIf you are not satisfied with the title and x axis and y axis, you can assign them yourself.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\na <- getAnnual(testdl, output = 'mean', title = 'title', x = 'x axis', y = 'y axis')\na\n```\n\nIf you want to calculate annual rainfall for a single dataframe containing one time series.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\na <- getAnnual_dataframe(testdl[[1]])\na\n```\n\n### 1.3 Extract Common Period from Different Time Series\n\nNow we have the general information of the precipitation, if we want to use them in a model, we have to extract the common period of them, and use the common period precipitation to analyze.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\ntestdl_new <- extractPeriod(testdl, commonPeriod = TRUE )\nstr(testdl_new)\n```\n\nIf we want to extract data from a certain period, we can assgin start and end date.\n\n```{r, fig.show='hold', fig.height=4, fig.width=7}\n# Extract period of the winter of 1994\ntestdl_new <- extractPeriod(testdl, startDate = '1994-12-01', endDate = '1995-03-01' )\nstr(testdl_new)\n```\n\n### 1.3 Fill Gaps\n\nAlthough we have got the precipitation of the common period, we can still see that there are some missing values inside, which we should fill.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\ntestdl_new <- extractPeriod(testdl, commonPeriod = TRUE )\na <- getAnnual(testdl_new)\na\n```\n\nFirst we have to transform the datalist to dataframe, which can be done by the code below:\n```{r, fig.show='hold', fig.height=4, fig.width=7}\ndf <- list2Dataframe(testdl_new)\nhead(df)\n```\n\nFrom above, we can see that in the gauging station \"AAA\", there are some missing value marked as \"NA\". Now we are going to fill these gaps.\n\nThe gap filling is based on the correlation and linear regression between each two gauging stations, correlation table, correlation Order and Linear Coefficients are also printed when doing the calculation. Details can be found in ?fillGap.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\ndf_filled <- fillGap(df)\nhead(df_filled)\n```\n\nDefault correlation period is \"daily\", while sometimes the daily rainfall correlation of precipitation is not so strong, we can also select the correlation period.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\ndf_filled <- fillGap(df, corPeriod = 'monthly')\nhead(df_filled)\ndf_filled <- fillGap(df, corPeriod = 'yearly')\nhead(df_filled)\n```\n\n### 1.3 Seasonal and Monthly Precipitation.\n\nSometimes we need to know not only the annual precipitation, but also the precipitation of a certain month or certain season.\n```{r, fig.show='hold', fig.height=4, fig.width=7}\ndata(testdl)\n# year and mon can be extracted from date.\nTS  <- testdl[[1]]\nyear = as.numeric(format(TS[, 1], '%Y'))\nmonth = as.numeric(format(TS[, 1], '%m'))\n\n# Get the mean spring precipitation.\na <- getMeanPreci(TS[, 2], method = 'spring', yearIndex = year, monthIndex = month)\na\n\n# Get the series of spring precipitation, set fullResults = TRUE.\na <- getMeanPreci(TS[, 2], method = 'spring', yearIndex = year, monthIndex = month,\n                  fullResults = TRUE)\na\n\n# If missing value is excluded, set omitNA = TRUE.\na <- getMeanPreci(TS[, 2], method = 'winter', yearIndex = year, monthIndex = month,\n                  omitNA = TRUE, fullResults = TRUE)\na\n\n# Get special month precipitation, e.g. march.\na <- getMeanPreci(TS[, 2], method = 3, yearIndex = year, monthIndex = month,\n                  fullResults = TRUE)\na\n```\n\n\n\n\n\n\n\n\n\nGap filling is based on the correlation coefficient and the linear regression between each two gauging stations.\n\n\n\n\n\n\n\n\n\n## Figures\n\nThe figure sizes have been customised so that you can easily put two images side-by-side. \n\n```{r, fig.show='hold', size=10}\nplot(1:10)\nplot(10:1)\n```\n\nYou can enable figure captions by `fig_caption: yes` in YAML:\n\n    output:\n      rmarkdown::html_vignette:\n        fig_caption: yes\n\nThen you can use the chunk option `fig.cap = \"Your figure caption.\"` in **knitr**.\n\n## More Examples\n\nYou can write math expressions, e.g. $Y = X\\beta + \\epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.\n\n```{r, echo=FALSE, results='asis'}\nknitr::kable(head(mtcars, 10))\n```\n\nAlso a quote using `>`:\n\n> \"He who gives up [code] safety for [code] speed deserves neither.\"\n([via](https://twitter.com/hadleywickham/status/504368538874703872))\n",
    "created" : 1435009561991.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "2901072626",
    "id" : "26E0353B",
    "lastKnownWriteTime" : 1435454095,
    "path" : "~/hyfo/vignettes/hyfo.Rmd",
    "project_path" : "vignettes/hyfo.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}