{
    "contents" : "#' Get mean rainfall data, e.g. mean annual rainfall, mean monthly rainfall and mean winter rainfall.\n#' \n#' @param inputTS A time series with only data column (1 column).\n#' @param method A string showing the method used to calculate mean value, e.g., \"meanAnnualPreci\".\n#' more information please refer to details.\n#' @param yearIndex A numeric list showing the year index of the time series.\n#' @param monthIndex A numeric list showing the month index of the time series.\n#' @param fullResults A boolean showing whether the full results are shown, default is FALSE. If \n#' FALSE, only mean value will be returned, if TRUE, the sequence of values will be returned.\n#' @param omitNA in the calculation, whether NA is omitted, default is FALSE.\n#' @details\n#' there are following methods to be selected, \"meanAnnualPreci\", \"winter\", \"spring\", \"autumn\", \"summer\".\n#' @return The mean value of the input time series or the full results before calculating mean.\n#' @examples\n#' data(testdl)\n#' TS  <- testdl[[1]]\n#' year = as.numeric(format(TS[, 1], '%Y'))\n#' month = as.numeric(format(TS[, 1], '%m'))\n#' \n#' # Get the mean spring precipitation.\n#' a <- getMeanPreci(TS[, 2], method = 'spring', yearIndex = year, monthIndex = month)\n#' a\n#' \n#' # Get the series of spring precipitation, set fullResults = TRUE.\n#' a <- getMeanPreci(TS[, 2], method = 'spring', yearIndex = year, monthIndex = month,\n#'                   fullResults = TRUE)\n#' a\n#' \n#' # If missing value is excluded, set omitNA = TRUE.\n#' a <- getMeanPreci(TS[, 2], method = 'winter', yearIndex = year, monthIndex = month,\n#'                   omitNA = TRUE, fullResults = TRUE)\n#' a\n#' \n#' # Get special month precipitation, e.g. march.\n#' a <- getMeanPreci(TS[, 2], method = 3, yearIndex = year, monthIndex = month,\n#'                   fullResults = TRUE)\n#' a\n#' \n#' # We can also get annual precipitation.\n#' a <- getMeanPreci(TS[, 2], method = 'meanAnnualPreci', yearIndex = year, monthIndex = month,\n#'                   fullResults = TRUE)\n#'\n#' @export\ngetMeanPreci <- function(inputTS, method = NULL, yearIndex = NULL, monthIndex = NULL,\n                         fullResults = FALSE, omitNA = FALSE) {\n  # First check if all the records are NA.\n  if (any(!is.na(inputTS))) {\n    #converting daily preci to the wanted preci.\n    if (method == 'meanAnnualPreci') {\n      ###yearIndex <- startTime$year + 1900\n      annualPreci <- tapply(inputTS, INDEX = yearIndex, FUN = sum, na.rm = omitNA)#ggplot is able not to show NA, so choose TRUE\n      if (fullResults == TRUE) output <- annualPreci else output <- mean(annualPreci, na.rm = omitNA)\n      \n    } else if (method == 'winter') {\n      #winter is the most tricky part, because it starts from Dec to Feb next year, it's a year-crossing season,\n      #so we have to make some changes to the monthIndex\n      #e.g.data from 1950.1.1 - 2008.3.31 if we want to calculate the mean winter preci, to calculate winter month\n      #December, we have to move the yearIndex one month forwards or two months backwards, to make 12,1,2 in one year      \n      ###yearIndex <- startTime$year + 1900\n      ###monthIndex <- startTime$mon + 1\n      \n      #we move the yearIndex one month backwards\n      yearIndex_new <- c(yearIndex[32:length(yearIndex)], rep(tail(yearIndex, 1), 31))\n      \n      winterIndex <- which(monthIndex == 12 | monthIndex == 1 | monthIndex == 2)\n      winterYear <- yearIndex_new[winterIndex]#this index is used for calculation\n      \n      #because we don't have 1949.Dec, so the first winter is not intact, so first two months are elemenated\n      \n      startIndex <- length(which(winterYear == yearIndex[1])) + 1\n      winterOfLastYear <- length(which(winterYear == tail(yearIndex, 1)))\n      if (winterOfLastYear > 91) {\n        endIndex <- length(winterYear) - 31 #in case the data set ends at Dec.31\n      } else if (winterOfLastYear < 90) { # incase the data ends at Jan 31\n        endIndex <- length(winterYear) - length(which(winterYear == tail(yearIndex, 1)))\n      } else {\n        endIndex <- length(winterYear)\n      }\n      \n      inputTS <- inputTS[winterIndex][startIndex:endIndex]#needs two process with inputPreci, first, extract\n      #the winter preci, second, delete first two month of 1950\n      \n      winterYear <- winterYear[startIndex:endIndex]#needs one process, delete two months\n      \n      seasonalPreci <- tapply(inputTS,INDEX = winterYear, FUN = sum, na.rm = omitNA)\n      if (fullResults == TRUE) output <- seasonalPreci else output <- mean(seasonalPreci, na.rm = omitNA)  \n      \n    } else if (method == 'spring') {\n      springIndex <- which(monthIndex == 3 | monthIndex == 4 | monthIndex == 5)\n      springYear <- yearIndex[springIndex]\n      inputTS <- inputTS[springIndex]\n      seasonalPreci <- tapply(inputTS, INDEX = springYear, FUN = sum, na.rm = omitNA)\n      if (fullResults == TRUE) output <- seasonalPreci else output <- mean(seasonalPreci, na.rm = omitNA)\n      \n    } else if (method == 'summer') {\n      summerIndex <- which(monthIndex == 6 | monthIndex == 7 | monthIndex == 8)\n      summerYear <- yearIndex[summerIndex]\n      inputTS <- inputTS[summerIndex]\n      seasonalPreci <- tapply(inputTS, INDEX = summerYear, FUN = sum, na.rm = omitNA)\n      if (fullResults == TRUE) output <- seasonalPreci else output <- mean(seasonalPreci, na.rm = omitNA)\n      \n    } else if (method == 'autumn') {\n      autumnIndex <- which(monthIndex == 9 | monthIndex == 10 | monthIndex == 11)\n      autumnYear <- yearIndex[autumnIndex]\n      inputTS <- inputTS[autumnIndex]\n      seasonalPreci <- tapply(inputTS, INDEX = autumnYear, FUN = sum, na.rm = omitNA)\n      if (fullResults == TRUE) output <- seasonalPreci else output <- mean(seasonalPreci, na.rm = omitNA)\n    } else if (is.numeric(method)) {\n      month <- method\n      monthlyPreci <- tapply(inputTS, INDEX = list(yearIndex, monthIndex), \n                             FUN = sum, na.rm = omitNA)[, month]\n      \n      if (fullResults == TRUE) output <- monthlyPreci else output <- mean(monthlyPreci, na.rm = omitNA)\n    }\n  } else {\n    output <- NA\n  }\n\n  \n  return(output)\n}\n",
    "created" : 1435497220111.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "1201098794",
    "id" : "2F105CB0",
    "lastKnownWriteTime" : 1435456661,
    "path" : "~/hyfo/R/getMeanPreci.R",
    "project_path" : "R/getMeanPreci.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}