{
    "contents" : "#' Get variable name in the NetCDF file. After knowning the name, you can use \\code{loadNcdf} to load\n#' the target variable.\n#' \n#' @param filePath A path pointing to the netCDF file.\n#' @return The names of the varialbes in the file.\n#' @import ncdf\n#' @export\ngetNcdfVar <- function(filePath) {\n  nc <- open.ncdf(filePath)\n  names <- names(nc$var)\n  return(names)\n}\n\n\n#' Load NetCDF file\n#' \n#' @param filePath A path pointing to the NetCDF file, version3.\n#' @param varname A character representing the variable name, you can use \\code{getNcdfVar} to\n#' get the basic information about the variables and select the target.\n#' @return A list object from \\code{hyfo} containing the information to be used in the analysis, \n#' or biascorrection.\n#' \n#' @export\n#'@import ncdf\nloadNcdf <- function(filePath, varname) {\n  nc <- open.ncdf(filePath)\n  \n  var <- nc$var\n  # Use name to locate the variable\n  call_1 <- as.call(c(\n    list(as.name('$'), var, varname)\n  ))\n  var <- eval(call_1)\n  if(is.null(var)) stop('No such variable name, check source file.')\n  \n  # First needs to identify the variable name, load the right data\n  message('Loading data...')\n  nc_data <- get.var.ncdf(nc, var)\n  message('Processing...')\n  \n  dimNames <- unlist(lapply(1:length(var$dim), function(x) var$dim[[x]]$name))\n  \n  # Only deals with the most common dimensions, futher dimensions will be added in future.\n  dimIndex <- match(c('lon', 'lat', 'time', 'member'), dimNames)\n  \n  gridData <- list()\n  gridData$Variable$varName <- varname\n  gridData$xyCoords$x <- var$dim[[dimIndex[1]]]$vals\n  gridData$xyCoords$y <- var$dim[[dimIndex[2]]]$vals\n  \n  # Time part needs to be taken seperately\n  DateDiff <- var$dim[[dimIndex[3]]]$vals\n  # To get real time, time since when has to be grabbed from the dataset.\n  timeSince <- as.POSIXlt(strsplit(var$dim[[dimIndex[3]]]$units, split = 'since')[[1]][2])\n  Date <- rep(timeSince, length(DateDiff))\n  Date$mday <- Date$mday + DateDiff\n  gridData$Dates$start <- as.character(Date)\n  \n  # Assing data to grid data\n  gridData$Data <- nc_data\n  attributes(gridData$Data)$dimensions <- dimNames\n  \n  if (!is.na(dimIndex[4])) gridData$Members <- var$dim[[dimIndex[4]]]$vals\n  \n  gridData$Source <- 'from hyfo package, http://yuanchao-xu.github.io/hyfo/'\n  \n  return(gridData)\n  \n}\n\n#' Write to NetCDF file using hyfo list file\n#' @param gridData A hyfo list file or the list file from \\code{loadECOMS{ecomsUDG.Raccess}}\n#'  or \\code{loadGridData{ecomsUDG.Raccess}}\n#' @param filePath A path of the new NetCDF file, should end with \".nc\"\n#' @return An NetCDF version 3 file.\n#' @export \n#' @import ncdf\nwriteNcdf <- function(gridData, filePath) {\n  \n  name <- gridData$Variable$varName\n  # First defines dimensions.\n  dimLon <- dim.def.ncdf('lon', 'degree', gridData$xyCoords$x)\n  dimLat <- dim.def.ncdf('lat', 'degree', gridData$xyCoords$y)\n  dimMem <- NULL\n  if (!is.null(gridData$Members)) {\n    dimMem <- dim.def.ncdf('member', 'members', 1:length(gridData$Members))\n  }\n  \n  \n  # Time needs to be treated seperately\n  dates <- as.POSIXlt(gridData$Dates$start)\n  time <- difftime(dates, dates[1], units = 'days')\n  timeUnits <- paste('days since', dates[1])\n  dimTime <- dim.def.ncdf('time', timeUnits, time)\n  \n  \n  \n  # Depending on whether there is a member part of the dataset.\n  \n  dimList <- list(dimLon, dimLat, dimTime, dimMem)\n  # delete the NULL list, in order that there is no member part in the data.\n  dimList <- Filter(Negate(is.null), dimList)\n  # Then difines data\n  var <- var.def.ncdf( name, \"units\", dimList, 1e20 )\n  \n  nc <- create.ncdf(filePath, var)\n  \n  #   This part comes from the library downscaleR\n  #   att.put.ncdf(nc, \"time\", \"standard_name\",\"time\")\n  #   att.put.ncdf(nc, \"time\", \"axis\",\"T\")\n  #   att.put.ncdf(nc, \"time\", \"_CoordinateAxisType\",\"Time\")\n  #   #att.put.ncdf(nc, \"time\", \"_ChunkSize\",1)\n  #   att.put.ncdf(nc, \"lon\", \"standard_name\",\"longitude\")\n  #   att.put.ncdf(nc, \"lon\", \"_CoordinateAxisType\",\"Lon\")\n  #   att.put.ncdf(nc, \"lat\", \"standard_name\",\"latitude\")\n  #   att.put.ncdf(nc, \"lat\", \"_CoordinateAxisType\",\"Lat\")\n  \n  att.put.ncdf(nc, 0, \"Conventions\",\"CF-1.4\")\n  \n  dimIndex <- match(c('lon', 'lat', 'time', 'member'), attributes(gridData$Data)$dimensions)\n  dimIndex <- na.omit(dimIndex)\n  data <- aperm(gridData$Data, dimIndex)\n  put.var.ncdf(nc, name, data)\n  close.ncdf(nc)\n  \n}\n\n#'@import ncdf\ngetExtralDim <- function(...) {\n  dimList <- list(...)\n  \n  \n}",
    "created" : 1438199524196.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "859494231",
    "id" : "50E9B0D1",
    "lastKnownWriteTime" : 1438208099,
    "path" : "~/hyfo/R/Ncdf_related.R",
    "project_path" : "R/Ncdf_related.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}