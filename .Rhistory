sameVersion <- version12 == version_local12
if (any(sameVersion == FALSE)) {
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine_start <- versionLine + 2
infoLine_end <- grep('<p>For historical releases and the introduction of updates about each version', page) - 1
info_msg <- character()
for (infoLine in infoLine_start:infoLine_end) {
info_line <- strsplit(strsplit(page[infoLine], split = '>')[[1]][2], split = '<')[[1]][1]
if (!is.na(info_line)) info_msg <- c(info_msg, info_line)
}
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- paste(version_msg, paste(info_msg, collapse = '\n'), install_msg, sep = '\n')
} else message_out <- NULL
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
if (grepl('Version', message_out)) {
packageStartupMessage(message_out)
}
}
}
devtools::document()
devtools::check()
devtools::document()
devtools::install_github('Yuanchao-Xu/hyfo')
library(hyfo)
devtools::document()
devtools::document
devtools::document()
devtools::check()
install.packages('devtools')
devtools::install_github('Yuanchao-Xu/hyfo')
library(devtools)
install_github('Yuanchao-Xu/hyfo')
library(hyfo)
?getPreciBar
b1 <- getPreciBar(tgridData, method = 'annual')
b2 <- getPreciBar(tgridData, method = 'meanMonthly')
b1 <- getPreciBar(tgridData, method = 'annual')
?getBiasFactor
devtools::document()
devtools::check()
?getPreciBar
debug(getBiasFactor)
?getBiasFactor
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
biasFactor <- getBiasFactor(nc, tgridData)
S
str(biasFactor)
biasFactor <- getBiasFactor(nc, tgridData)
debug(standardGeneric)
devtools::document()
devtools::check()
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
library(devtools)
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
install_github('Yuanchao-Xu/hyfo')
install_github('Yuanchao-Xu/hyfo')
install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
library(hyfo)
?getBiasFactor
?getPreciBar
devtools::build()
devtools::document()
devtools::check()
devtools::build()
??readData_folder
?hyfo::readData_folder
devtools::use_travis()
devtools::check()
devtools::check(cran = T)
?check
devtools::check(cran = T)
devtools::build()
Sys.getenv("R_PROFILE_USER")
?install
??install
devtools::use_vignette("my-vignette")
devtools::check(cran = T)
devtools::check(cran = T)
?tools
devtools::check(cran = T)
devtools::build()
devtools::check(cran = T)
devtools::build()
devtools::check(cran = T)
devtools::build()
devtools::check(cran = T)
devtools::build()
devtools::check(cran = T)
devtools::build()
devtools::check(cran = T)
devtools::build()
a <- readLines('https://cran.r-project.org/web/packages/hyfo/NEWS')
a
devtools::check(cran = T)
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check(cran = T)
install.packages('ncdf4')
library(ncdf4)
?open.ncdf
library(ncdf)
?open.ncdf
?nc_open
filePath <- file.choose()
nc <- nc_open(filePath)
names <- names(nc$var)
str(nc)
names <- names(nc$var)
names
citation(ncdf4)
citation('ncdf4')
name
names
varname <- names
nc <- nc_open(filePath)
str(nc)
varname
call_1 <- as.call(c(
list(as.name('$'), var, varname)
))
var <- eval(call_1)
var <- nc$var
var <- eval(call_1)
call_1 <- as.call(c(
list(as.name('$'), var, varname)
))
var <- eval(call_1)
if(is.null(var)) stop('No such variable name, check source file.')
var
str(var)
nc_data <- ncvar_get(nc, var)
str(nc_data)
a <- nc_data
nc_data <- get.var.ncdf(nc,var)
dimNames <- unlist(lapply(1:length(var$dim), function(x) var$dim[[x]]$name))
dimIndex <- match(c('lon', 'lat', 'time', 'member'), dimNames)
gridData <- list()
gridData$Variable$varName <- varname
gridData$xyCoords$x <- var$dim[[dimIndex[1]]]$vals
gridData$xyCoords$y <- var$dim[[dimIndex[2]]]$vals
timeUnit <- strsplit(var$dim[[dimIndex[3]]]$units, split = ' since')[[1]][1]
timeDiff <- var$dim[[dimIndex[3]]]$vals
# To get real time, time since when has to be grabbed from the dataset.
timeSince <- as.POSIXlt(strsplit(var$dim[[dimIndex[3]]]$units, split = 'since')[[1]][2], tz = tz)
timeSince <- as.POSIXlt(strsplit(var$dim[[dimIndex[3]]]$units, split = 'since')[[1]][2], tz = tz)
tz = 'GMT'
timeSince <- as.POSIXlt(strsplit(var$dim[[dimIndex[3]]]$units, split = 'since')[[1]][2], tz = tz)
unitDic <- data.frame(weeks = 'weeks', days = 'days', hours = 'hours',
minutes = 'mins', seconds = 'secs')
timeDiff <- as.difftime(timeDiff, units = as.character(unitDic[1, timeUnit]))
Date <- timeSince + timeDiff
if (length(Date) == 1) {
warning("Only one time step is taken, time dimension is dropped in the original data.
But after loading, the time dimension (with length : 1) will be added.")
}
gridData$Dates$start <- as.character(Date)
if (length(dim(nc_data)) < 3) {
dim(nc_data) <- c(dim(nc_data), 1)
message('Time dimension is added, make sure in your original data, only time dimension was dropped.')
}
gridData$Data <- nc_data
attributes(gridData$Data)$dimensions <- dimNames
if (!is.na(dimIndex[4])) gridData$Members <- var$dim[[dimIndex[4]]]$vals
gridData$Loaded <- 'by hyfo package, http://yuanchao-xu.github.io/hyfo/'
nc_close(nc)
downscaleNcdf <- function(gridData, year = NULL, month = NULL, lon = NULL, lat = NULL) {
if (!is.null(year)) {
Dates <- as.POSIXlt(gridData$Dates$start)
yearIndex <- Dates$year + 1900
monIndex <- Dates$mon + 1
timeDim <- match('time', attributes(gridData$Data)$dimensions)
if (is.null(month) || !any(sort(month) != month)) {
targetYearIndex <- which(yearIndex %in% year)
if (length(targetYearIndex) == 0) stop('No input years in the input ts, check your input.')
# if year crossing  than sort(month) != month
} else {
startIndex <- intersect(which(yearIndex == year[1] - 1), which(monIndex == month[1]))[1]
endIndex <- tail(intersect(which(yearIndex == tail(year, 1)), which(monIndex == tail(month, 1))), 1)
if (is.na(startIndex) || length(endIndex) == 0 || startIndex > endIndex) {
stop('Cannot find input months and input years in the input time series.')
} else {
targetYearIndex <- startIndex:endIndex
if (any(diff(year) != 1)) {
# if year is not continuous, like 1999, 2003, 2005, than we have to sift again.
# Only for special cases.
Dates <- Dates[targetYearIndex]
yea <- Dates$year + 1900
mon <- Dates$mon + 1
DateIndex <- unlist(sapply(year, function(x) {
startIndex <- intersect(which(yea == x - 1), which(mon == month[1]))[1]
endIndex <- tail(intersect(which(yea == x), which(mon == tail(month, 1))), 1)
index <- startIndex:endIndex
return(index)
}))
targetYearIndex <- targetYearIndex[DateIndex]
# cannot directly return output here, because sometimes, month can be incontinuous,
# we still need the next process to sift month.
}
}
}
gridData$Dates$start <- gridData$Dates$start[targetYearIndex]
gridData$Dates$end <- gridData$Dates$end[targetYearIndex]
gridData$Data <- chooseDim(gridData$Data, timeDim, targetYearIndex)
}
if (!is.null(month)) {
Dates <- as.POSIXlt(gridData$Dates$start)
monIndex <- Dates$mon + 1
targetMonIndex <- which(monIndex %in% month)
if (length(targetMonIndex) == 0) stop('Check your input year, it may exceed the years
in the input dataset.')
gridData$Dates$start <- gridData$Dates$start[targetMonIndex]
gridData$Dates$end <- gridData$Dates$end[targetMonIndex]
timeDim <- match('time', attributes(gridData$Data)$dimensions)
gridData$Data <- chooseDim(gridData$Data, timeDim, targetMonIndex)
}
if (!is.null(lon)) {
lonIndex <- gridData$xyCoords$x
lonI1 <- which(abs(lonIndex - min(lon)) == min(abs(lonIndex - min(lon)), na.rm = TRUE))
lonI2 <- which(abs(lonIndex - max(lon)) == min(abs(lonIndex - max(lon)), na.rm = TRUE))
# take the as large as possible range
targetLonIndex <- lonI1[length(lonI1)]:lonI2[length(lonI2)]
if (length(targetLonIndex) == 0) stop('Your input lon is too small, try to expand the
longitude range.')
gridData$xyCoords$x <- gridData$xyCoords$x[targetLonIndex]
lonDim <- match('lon', attributes(gridData$Data)$dimensions)
gridData$Data <- chooseDim(gridData$Data, lonDim, targetLonIndex)
}
if (!is.null(lat)) {
latIndex <- gridData$xyCoords$y
latI1 <- which(abs(latIndex - min(lat)) == min(abs(latIndex - min(lat)), na.rm = TRUE))
latI2 <- which(abs(latIndex - max(lat)) == min(abs(latIndex - max(lat)), na.rm = TRUE))
targetLatIndex <- latI1[length(latI1)]:latI2[length(latI2)]
if (length(targetLonIndex) == 0) stop('Your input lat is too small, try to expand the
latitude range.')
gridData$xyCoords$y <- gridData$xyCoords$y[targetLatIndex]
latDim <- match('lat', attributes(gridData$Data)$dimensions)
gridData$Data <- chooseDim(gridData$Data, latDim, targetLatIndex)
}
return(gridData)
}
output <- downscaleNcdf(gridData, ...)
output <- downscaleNcdf(gridData)
str(gridData)
name <- gridData$Variable$varName
filePath <- file.choose(new = T)
missingValue = 1e20
units = NULL
name <- gridData$Variable$varName
dimLon <- ncdim_def('lon', 'degree', gridData$xyCoords$x)
dimLat <- ncdim_def('lat', 'degree', gridData$xyCoords$y)
dimMem <- NULL
dimMem <- ncdim_def('member', 'members', 1:length(gridData$Members))
dimMem
is.null(gridData$Members)
dimMem <- NULL
if (!is.null(gridData$Members)) {
dimMem <- ncdim_def('member', 'members', 1:length(gridData$Members))
}
# Time needs to be treated seperately
dates <- as.POSIXlt(gridData$Dates$start, tz = tz)
?getTimeUnit
??getTimeUnit
units <- getTimeUnit(dates)
??getTimeUnit
getTimeUnit <- function(dates) {
units <- c('weeks', 'days', 'hours', 'mins', 'secs')
output <- NULL
for (unit in units) {
time <- difftime(dates, dates[1], units = unit)
rem <- sapply(time, function(x) x%%1)
if (!any(rem != 0)) {
output <- unit
break
}
}
return(output)
}
dates <- as.POSIXlt(gridData$Dates$start, tz = tz)
if (is.null(units)) {
units <- getTimeUnit(dates)
time <- difftime(dates, dates[1], units = units)
} else {
time <- difftime(dates, dates[1], units = units)
}
timeUnits <- paste(units, 'since', dates[1])
dimTime <- ncdim_def('time', timeUnits, time)
timeUnits
time
as.numeric(time)
dimTime <- ncdim_def('time', timeUnits, as.numeric(time))
str(dimTime)
dimList <- list(dimLon, dimLat, dimTime, dimMem)
dimList <- Filter(Negate(is.null), dimList)
var <- ncvar_def( name, "units", dimList, missingValue)
nc <- nc_create(filePath, var)
ncatt_put(nc, "time", "standard_name","time")
ncatt_put(nc, "time", "axis","T")
ncatt_put(nc, "time", "_CoordinateAxisType","Time")
#ncatt_put(nc, "time", "_ChunkSize",1)
ncatt_put(nc, "lon", "standard_name","longitude")
ncatt_put(nc, "lon", "_CoordinateAxisType","Lon")
ncatt_put(nc, "lat", "standard_name","latitude")
ncatt_put(nc, "lat", "_CoordinateAxisType","Lat")
if (!is.null(dimMem)){
ncatt_put(nc, "member", "standard_name","realization")
ncatt_put(nc, "member", "_CoordinateAxisType","Ensemble")
#att.put.ncdf(nc, "member", "ref","http://www.uncertml.org/samples/realisation")
}
ncatt_put(nc, 0, "Conventions","CF-1.4")
ncatt_put(nc, 0, 'WrittenBy', 'hyfo(http://yuanchao-xu.github.io/hyfo/)')
dimIndex <- match(c('lon', 'lat', 'time', 'member'), attributes(gridData$Data)$dimensions)
dimIndex <- na.omit(dimIndex)
dimIndex
data <- aperm(gridData$Data, dimIndex)
ncvar_put(nc, name, data)
nc_close(nc)
devtools::document()
devtools::check(cran=T)
devtools::document()
devtools::check(cran=T)
devtools::build()
a <- c(null,null)
a <- c(NULL, NULL)
a
?match
match()
match
x <- c('lon', 'lat', 'time', 'member')
table <- c('longitude', 'latitude')
index <- lapply(x, function(x) {
a <- grep(x, table)
})
a
index
index <- sapply(x, function(x) {
a <- grep(x, table)
})
index
index <- unlist(lapply(x, function(x) {
a <- grep(x, table)
}))
index
table <- c('latitude', 'longitude')
index <- unlist(lapply(x, function(x) {
a <- grep(x, table)
}))
index
table <- c('itude', 'itude')
index <- unlist(lapply(x, function(x) {
a <- grep(x, table)
}))
index
devtools::document()
devtools::check()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::check()
?match
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
library(ncdf4)
?nc_write
??nc_create
devtools::document()
devtools::document()
devtools::check()
devtools::build()
writePath <- file.choose()
writePath <- file.choose(new = T)
library(hyfo)
filePath <- file.choose()
name <- getNcdfVar(filePath)
a <- loadNcdf(filePath, name[6])
str(a)
a$xyCoords$y
attributes(a$xyCoords$y)
attributes(a$xyCoords$y)$name <- 'dafa'
attributes(a$xyCoords$y)
devtools::build()
devtools::check()
devtools::check()
attributes(a$xyCoords$x)$name
?writeNcdf
filePath1 <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath1)
nc <- loadNcdf(filePath1, varname1)
nc <- loadNcdf(filePath1, varname)
str(nc)
nc$xyCoords$x
nc$xyCoords$y
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
writePath <- file.choose(new=T)
writeNcdf(nc, writePath)
a <- loadNcdf(writePath, varname)
str(a)
filePath <- file.choose()
name <- getNcdfVar(filePath)
a <- loadNcdf(filePath, name[6])
writeNcdf(nc, writePath)
b <- loadNcdf(writePath, name[6])
writeNcdf(a, writePath)
b <- loadNcdf(writePath, name[6])
str(b)
str(a)
debug(writeNcdf)
writeNcdf(a, writePath)
str(data)
debug(loadNcdf)
b <- loadNcdf(writePath, name[6])
str(var)
devtools::check()
writeNcdf(a, writePath)
b <- loadNcdf(writePath, name[6])
str(b)
debug(writeNcdf)
writeNcdf(a, writePath)
dimIndex
dimIndex
str(diList)
str(dimList)
str(dimList)
str(dimList)
name
str(var)
str(dimList)
dimIndex
attributes(gridData$Data)$dimensions
str(dimList)
c('lon', 'lat', 'time', 'member')[dimIndex]
dimIndex
c('lon', 'lat', 'time', 'member')[c(1,3,2)]
c('lon', 'lat', 'time', 'member')[c(1,2,3)]
attributes(gridData$Data)$dimensions
grep('longitude', 'lon')
grep('lon','longitude')
?grep
dimIndex
order(dimIndex)
dimIndex
str(dimIndex)
devtools::check()
devtools::check()
writeNcdf(a, writePath)
debug(writeNcdf)
writeNcdf(a, writePath)
devtools::check()
debug(writeNcdf)
writeNcdf(a, writePath)
dimIndex
str(dimList)
str(dimList)
str(dimList)
str(var)
name
str(nc)
b <- loadNcdf(writePath, name[6])
str(b)
identical(a, b)
str(a)
identical(a$Variable, b$Variable)
identical(a$xyCoords, b$xyCoords)
identical(a$Dates, b$Dates)
identical(a$Data, b$Data)
str(a$Data)
str(b$Data)
a$Data == b$Data
a$Data - b$Data
a$Data - b$Data > 0.0001
any((a$Data - b$Data > 0.0001) == T)
any((a$Data - b$Data > 0.0000001) == T)
devtools::build()
devtools::check()
