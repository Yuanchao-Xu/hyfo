length(list)
str(list)
undebug(plotTS)
TSlist <- list(obs, frc, frc_new, frc_new1, frc_new2, frc_new3, frc_new4)
names(TSlist) <- c('obs', 'frc', 'delta', 'delta_preci', 'scale', 'eqm', 'gqm')
plotTS(list = TSlist, plot = 'cum')
TSlist <- list(dataframe, dataframe1)
names(TSlist) <- c('1st', '2nd')
plotTS(list = TSlist, plot = 'cum')
TSlist <- list(testdl[[1]], testdl[[2]])
names(TSlist) <- c('1st', '2nd')
plotTS(list = TSlist, plot = 'cum')
loadNcdf
library(hyfo)
?loadNcdf
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
?downscaleNcdf
nc2 <- downscaleNcdf(nc, year = 2005, month = 3:8)
str(nc2)
?extractPeriod
?getHisEnsem
b <- getHisEnsem(a, example = c('1994-2-4', '1996-1-4'))
a <- testdl[[1]]
b <- getHisEnsem(a, example = c('1994-2-4', '1996-1-4'))
b <- getHisEnsem(a, example = c('1994-2-4', '1996-1-4'), plot = 'cum')
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
frc <- frc
frc <- nc
hindcast <- nc
obs <- nc
str(frc)
devtools::check()
file <- system.file("extdata", "1999.csv", package = "hyfo")
folder <- strsplit(file, '1999')[[1]][1]
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
folder
file <- system.file("extdata", "1999.csv", package = "hyfo")
file
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
filePath
file <- system.file("extdata", "1999.csv", package = "hyfo")
file
folder <- strsplit(file, '1999')[[1]][1]
a <- collectData_csv_anarbe(folder)
library(hyfo)
a <- collectData_csv_anarbe(folder)
a <- collectData(folder, fileType = 'csv', range = c(10, 20, 1, 2))
folder <- file.path(path.package("hyfo"), 'extdata')
a <- collectData(folder, fileType = 'csv', range = c(10, 20, 1,2))
folder
a
a <- collectData_csv_anarbe(folder)
debug(collectData_csv_anarbe)
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
fileNames
debug(readColumn_csv_anarbe)
fileName
fileName
fileName <- "C:/Users/Yuanchao/Documents/R/win-library/3.2/hyfo/extdata/1999.csv"
data <- read.csv(fileName, skip = 3)
?read.csv
data <- read.csv(fileName, skip = 4)
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
#' Collect data from csv for Anarbe case.
#'
#' Collect data from the gauging stations in spain, catchement Anarbe
#'
#' @param folderName A string showing the path of the folder holding different csv files.
#' @param output A boolean showing whether the output is given, default is T.
#' @return The collected data from different csv files.
#' @examples
#'
#' #use internal data as an example.
#' file <- system.file("extdata", "1999.csv", package = "hyfo")
#' folder <- strsplit(file, '1999')[[1]][1]
#' a <- collectData_csv_anarbe(folder)
#'
#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/
#'
#' @references
#'
#' \itemize{
#' \item http://meteo.navarra.es/estaciones/mapadeestaciones.cfm
#' \item R Core Team (2015). R: A language and environment for statistical computing. R Foundation for
#' Statistical Computing, Vienna, Austria. URL http://www.R-project.org/.
#' }
#'
#' @source http://meteo.navarra.es/estaciones/mapadeestaciones.cfm
#' @export
#' @importFrom utils tail
collectData_csv_anarbe <- function(folderName, output = TRUE){
fileNames <- list.files(folderName, pattern='*.csv', full.names = TRUE)
data <- lapply(fileNames, readColumn_csv_anarbe)
data <- do.call('rbind', data)
data <- data[, 1:2]
data[, 1] <- as.Date(data[, 1], format = '%d/%m/%Y')
#newFileName <- file.choose(new = T)
#write.table(data_new,file=newFileName,row.names = F, col.names = F,sep=',')
a <- unlist(strsplit(folderName, '\\\\|/'))
tarName <- tail(a, 2)[1]
colnames(data) <- c('Date', tarName)
if (output) return(data)
}
readColumn_csv_anarbe <- function(fileName){
data <- read.csv(fileName, skip = 4)
endIndex <- which(data == '', arr.ind = TRUE)[1]-1
data <- data[1:endIndex, ]
if (!is.null(levels(data[, 2]))) {
data[, 2] <- as.numeric(levels((data[, 2])))[data[, 2]]
}
colnames(data) <- c('Date', 'target')
message(fileName)
return(data)
}
a <- collectData_csv_anarbe(folder)
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
page
str(page)
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
grep('updates', page)
page[53]
page[59]
grep('id=\\"updates"', page)
InfoNumber <- lineNumber + 1
lineNumber <- grep('id=\\"updates"', page)
InfoNumber <- lineNumber + 1
page[54]
page[55]
page[56]
page[57]
page[59]
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- page[versionLine]
version
version <- strsplit(page[versionLine], split = c('version', 'was'))
version
version <- strsplit(page[versionLine], split = c('version'))
version
version <- strsplit(page[versionLine], split = ' ')
version
version <- strsplit(page[versionLine], split = ' ')[3]
version
version <- strsplit(page[versionLine], split = ' ')[[3]]
version <- unlist(strsplit(page[versionLine], split = ' '))[3]
version
packageDescription("hyfo")$Version
version_local <- packageDescription("hyfo")$Version
packageDescription("hyfo")
as.numeric(version)
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[3]
version
version <- unlist(strsplit(page[versionLine], split = ' '))[4]
version
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
infoLine <- versionLine + 2
page[57]
info <- strsplit(page[infoLine], split = '<p>')
info
info <- strsplit(strsplit(page[infoLine], split = '<p>'), split = '</p>')
info <- strsplit(strsplit(page[infoLine], split = '<p>')[2], split = '</p>')
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[2]], split = '</p>')
strsplit(page[infoLine], split = '<p>')[2]
strsplit(page[infoLine], split = '<p>')
info <- strsplit(strsplit[(page[infoLine], split = '<p>')[[1]][2], split = '</p>')
strsplit[(page[infoLine], split = '<p>')[[1]][2]
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')
info
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
info
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]][1]
info
message_out <- paste(page[versionLine], '/n', info)
message_out
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
version_msg
message_out <- paste(version_msg, '/n', info)
message_out
message(message_out)
message_out <- paste(version_msg, '\n', info)
message(message_out)
message_out <- paste(version_msg, info, sep = '\n')
message(message_out)
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
if (version != version_local) {
message_out <- paste(version_msg, info, sep = '\n')
message(message_out)
}
}
hyfoUpdates
hyfoUpdates()
?packageStartupMessage()
## For package updates information
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by devtools::install_gihub("Yuanchao-Xu/hyfo")'
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
message(message_out)
}
}
## For package updates information
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by devtools::install_gihub("Yuanchao-Xu/hyfo")'
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
message(message_out)
}
}
hyfoUpdates()
devtools::document()
hyfoUpdates()
devtools::document()
hyfoUpdates()
download.file()
?download.file()
download.file()
download.file('dafd')
download.file(destfile = 'dafd')
download.file(url = 'dafa', destfile = 'dafd')
download.file(url = 'www.dafa.com', destfile = 'dafd')
download.file(url = 'https://www.dafa.com', destfile = 'dafd')
try(hyfoUpdates())
try(hyfoUpdates())
try(hyfoUpdates())
devtools::document()
?try
devtools::document()
devtools::document()
try(hyfoUpdates(), silent = TRUE)
try(hyfoUpdates(), silent = TRUE)
suppressWarnings(try(hyfoUpdates(), silent = TRUE))
devtools::document()
devtools::document()
devtools::check()
## For package updates information
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by input: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
packageStartupMessage(message)
}
suppressWarnings(try(hyfoUpdates(), silent = TRUE))
suppressWarnings(try(hyfoUpdates(), silent = TRUE))
a <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
a
grep('Error', message)
grep('Error', message[[1]])
message[[1]]
message[1]
message
message <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
message
is.character(message)
message
length(message)
str(message)
is.atomic(message)
grepl('Version', message)
devtools::document()
devtools::check()
devtools::check()
devtools::build()
install.packages("E:/1/R/hyfo_1.2.5.tar.gz", repos = NULL, type = "source")
library(hyfo)
library(hyfo)
require(hyfo)
require(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
?plotTS
plotTS(testdl[[1]])
plotTS(list = testdl)
plotTS(testdl[[1]], testdl[[2]], plot = 'cum')
search()
library(hyfo)
search()
detach(hyfo)
detach('hyfo')
detach('hyfo', unload = T)
detach('package:hyfo', unload = T)
library(hyfo)
devtools::document()
devtools::check()
?packageDescription
devtools::document()
devtools::check()
contributors()
hyfo::hyfoUpdates()
library(hyfo)
library(hyfo)
library(hyfo)
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::document()
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (grepl('Version', message) & length(message) != 0) packageStartupMessage(message)
}
devtools::document()
debug(hyfoUpdates)
devtools::document()
hyfoUpdates()
version
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (grepl('Version', message_out) & !is.null(message_out)) packageStartupMessage(message_out)
}
hyfoUpdates()
devtools::document()
hyfoUpdates()
.onAttach()
debug(.onAttach)
.onAttach()
message_out
grepl('Version', message_out) & !is.null(message_out)
!is.null(message_out)
grepl('Version', message_out)
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out) & grepl('Version', message_out)) packageStartupMessage(message_out)
invisible(message_out)
}
debug(.onAttach)
.onAttach()
!is.null(message_out) & grepl('Version', message_out)
!is.null(message_out)
grepl('daf', 'dafde')
grepl('daf', NULL)
grepl('daf', ''sdfa)
grepl('daf', '')
length(grepl('daf', NULL))
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
grepl('Version', message_out) {
packageStartupMessage(message_out)
}
}
}
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
if (grepl('Version', message_out)) {
packageStartupMessage(message_out)
}
}
}
debug(.onAttach)
.onAttach()
devtools::document()
devtools::check()
.onAttach()
library(hyfo)
library(hyfo)
.onAttach()
.onAttach()
devtools::document()
devtools::check()
devtools::install_github('Yuanchao-Xu/hyfo')
devtools::install_github('Yuanchao-Xu/hyfo')
