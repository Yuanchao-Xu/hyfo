}
if (cell == 'mean') {
TS <- apply(data, MARGIN = 3, FUN = mean, na.rm = TRUE)
} else {
TS <- data[cell[1], cell[2], ]
}
return(TS)
}
#' @importFrom reshape2 melt
#' @describeIn getPreciBar
getPreciBar.TS <- function(TS) {
Date <- as.POSIXlt(TS[, 1])
yearIndex <- Date$year + 1900
monthIndex <- Date$mon + 1
n <- ncol(TS) - 1
if ( n == 1) {
TS <- TS[, 2]
} else {
TS <- TS[, -1]
# month index should be repeat, but years cannot.
yearIndex <- sapply(1:n, function(x) yearIndex + x - 1)
dim(yearIndex) <- c(n * nrow(yearIndex), 1)
monthIndex <- rep(monthIndex, n)
TS <- melt(TS)[, 2]
}
return(TS)
}
#' @importFrom stats median
#' @importFrom reshape2 melt
#' @import ggplot2
#' @describeIn getPreciBar
getPreciBar.plot <- function(TS, method, output, name, plotRange, omitNA, info,
yearIndex, monthIndex, ...) {
if (method == 'meanMonthly') {
monthlyPreci <- tapply(TS, INDEX = list(yearIndex, monthIndex), FUN = sum, na.rm = omitNA)
meanMonthlyPreci <- apply(monthlyPreci, MARGIN = 2, FUN = mean, na.rm = TRUE)
title <- 'Mean Monthly Precipitation'
xlab <- 'Month'
plotPreci <- data.frame(Index = month.abb[as.numeric(colnames(monthlyPreci))],
Preci = meanMonthlyPreci)
# Here factor has to be reassigned, to keep the original order, or it will be reordered.
plotPreci$Index <- factor(plotPreci$Index, levels = plotPreci$Index, ordered = TRUE)
if (plotRange) {
maxValue <- apply(monthlyPreci, MARGIN = 2, FUN = max, na.rm = TRUE)
minValue <- apply(monthlyPreci, MARGIN = 2, FUN = min, na.rm = TRUE)
plotPreci$maxValue <- maxValue
plotPreci$minValue <- minValue
ylim <- c(0,max(maxValue, na.rm = TRUE) * 1.1)
} else {
ylim <- c(0,max(meanMonthlyPreci, na.rm = TRUE) * 1.1)
}
} else if (method == 'annual') {
if (length(unique(monthIndex)) < 12) {
warning ('There are less than 12 months in a year, the results may be inaccurate.')
}
annualPreci <- tapply(TS, INDEX = yearIndex, FUN = sum, na.rm = TRUE)
title <- 'Annual Precipitation'
xlab <- 'Year'
plotName <- names(annualPreci)
plotPreci <- data.frame(Index = names(annualPreci), Preci = annualPreci)
plotPreci$Index <- factor(plotPreci$Index, levels = plotPreci$Index, ordered = TRUE)
ylim <- c(0, max(annualPreci, na.rm = TRUE) * 1.1)
} else if (is.numeric(method)) {
month <- method
monExisting <- length(which(unique(monthIndex) == month))
if (monExisting == 0) stop("Your input month doesn't exist in the dataset.")
monthlyPreci <- getMeanPreci(TS, method = month, yearIndex = yearIndex,
monthIndex = monthIndex, fullResults = TRUE, omitNA = omitNA)
# If monthlyPreci length is 1, names need to be added.
if (length(monthlyPreci) == 1) names(monthlyPreci) <- unique(yearIndex)
plotPreci <- data.frame(Index = names(monthlyPreci), Preci = monthlyPreci)
plotPreci$Index <- factor(plotPreci$Index, levels = plotPreci$Index, ordered = TRUE)
title <- paste(month.abb[month], 'Precipitation over Whole Period', sep = ' ')
xlab <- 'Year'
ylim <- c(0, max(monthlyPreci, na.rm = TRUE) * 1.1)
} else if (method == 'spring') {
wm <- match(c(3, 4, 5), unique(monthIndex))
if (length(which(!is.na(wm))) < 3) {
stop('Spring has less than 3 months, check data and try to calculate every month
seperately or choose another season.')
}
seasonalPreci <- getMeanPreci(TS, method = 'spring', yearIndex = yearIndex,
monthIndex = monthIndex, fullResults = TRUE, omitNA = omitNA)
plotPreci <- data.frame(Index = names(seasonalPreci), Preci = seasonalPreci)
plotPreci$Index <- factor(plotPreci$Index, levels = plotPreci$Index, ordered = TRUE)
title <- paste('Spring', 'Precipitation over Whole Period', sep = ' ')
xlab <- 'Year'
ylim <- c(0, max(seasonalPreci, na.rm = TRUE) * 1.1)
} else if (method == 'summer') {
wm <- match(c(6, 7, 8), unique(monthIndex))
if (length(which(!is.na(wm))) < 3) {
stop('Summer has less than 3 months, check data and try to calculate every month
seperately or choose another season.')
}
seasonalPreci <- getMeanPreci(TS, method = 'summer', yearIndex = yearIndex,
monthIndex = monthIndex, fullResults = TRUE, omitNA = omitNA)
plotPreci <- data.frame(Index = names(seasonalPreci), Preci = seasonalPreci)
plotPreci$Index <- factor(plotPreci$Index, levels = plotPreci$Index, ordered = TRUE)
title <- paste('Summer', 'Precipitation over Whole Period', sep = ' ')
xlab <- 'Year'
ylim <- c(0, max(seasonalPreci, na.rm = TRUE) * 1.1)
} else if (method == 'autumn') {
wm <- match(c(9, 10, 11), unique(monthIndex))
if (length(which(!is.na(wm))) < 3) {
stop('Autumn has less than 3 months, check data and try to calculate every month
seperately or choose another season.')
}
seasonalPreci <- getMeanPreci(TS, method = 'autumn', yearIndex = yearIndex,
monthIndex = monthIndex, fullResults = TRUE, omitNA = omitNA)
plotPreci <- data.frame(Index = names(seasonalPreci), Preci = seasonalPreci)
plotPreci$Index <- factor(plotPreci$Index, levels = plotPreci$Index, ordered = TRUE)
title <- paste('Autumn', 'Precipitation over Whole Period', sep = ' ')
xlab <- 'Year'
ylim <- c(0, max(seasonalPreci, na.rm = TRUE) * 1.1)
} else if (method == 'winter') {
wm <- match(c(12, 1, 2), unique(monthIndex))
if (length(which(!is.na(wm))) < 3) {
stop('Winter has less than 3 months, check data and try to calculate every month
seperately or choose another season.')
}
seasonalPreci <- getMeanPreci(TS, method = 'winter', yearIndex = yearIndex,
monthIndex = monthIndex, fullResults = TRUE, omitNA = omitNA)
plotPreci <- data.frame(Index = names(seasonalPreci), Preci = seasonalPreci)
plotPreci$Index <- factor(plotPreci$Index, levels = plotPreci$Index, ordered = TRUE)
title <- paste('Winter', 'Precipitation over Whole Period', sep = ' ')
xlab <- 'Year'
ylim <- c(0, max(seasonalPreci, na.rm = TRUE) * 1.1)
} else {
stop(paste('No method called "', method, '", check help for information'))
}
xlim <- c(0, length(rownames(plotPreci)))
if (info == TRUE) {
meanValue <- round(mean(plotPreci$Preci, na.rm = TRUE), 2)
medianValue <- round(median(plotPreci$Preci,na.rm = TRUE), 2)
plotMean <- paste('Mean', ' = ', meanValue)
plotMedian <- paste('Median', ' = ', medianValue)
plotMax <- round(max(plotPreci$Preci, na.rm = TRUE), 2)
plotMin <- round(min(plotPreci$Preci, na.rm = TRUE), 2)
word <- paste('\n\n', paste(' Max', '=', plotMax), ',', paste('Min', '=', plotMin), ',',
plotMean, ',', plotMedian)
} else word <- NULL
xlab <- paste(xlab, word)
theme_set(theme_bw())
mainLayer <- with(plotPreci, {
ggplot(plotPreci) +
geom_bar(aes(x = Index, y = Preci), stat = 'identity', colour = 'black', fill = 'cyan2', width = rel(.4)) +
xlab(xlab) +
ylab('Precipitation (mm)') +
ggtitle(title) +
labs(empty = NULL, ...) +#in order to pass "...", arguments shouldn't be empty.
theme(plot.title = element_text(size = rel(1.6), face = 'bold'),
axis.title.x = element_text(size = rel(1.6)),
axis.title.y = element_text(size = rel(1.6)),
axis.text.x = element_text(angle = 90, hjust = 1, size = rel(1.9)),
axis.text.y = element_text(size = rel(1.9)))
#    geom_text(x = min(xlim) + 0.95 * (max(xlim) - min(xlim)), y = min(ylim) + 0.15 * (max(ylim) - min(ylim)),
#              label = word)+
#     geom_hline(yintercept = meanValue) +
#     geom_text(x = min(xlim) + 0.3 * (max(xlim) - min(xlim)), y = meanValue + 3, vjust = 0, label = 'mean') +
#     geom_hline(yintercept = medianValue, colour = 'red') +
#     geom_text(x = min(xlim) + 0.6 * (max(xlim) - min(xlim)), y = medianValue + 3, vjust = 0,
#               label = 'median', colour = 'red')
})
if (plotRange) {
if (is.null(plotPreci$maxValue)) {
message('There is no plotRange for this method')
print(mainLayer)
} else {
rangeLayer <- with(plotPreci, {
geom_errorbar(aes(x = Index, ymax = maxValue, ymin = minValue), width = rel(0.3))
})
print(mainLayer + rangeLayer)
}
} else {
print(mainLayer)
}
if (output == 'plot') {
return(mainLayer)
} else if (output == 'ggplot') {
if (is.null(name)) stop('"name" argument not found,
If you choose "ggplot" as output, please assign a name.')
plotPreci$Name <- rep(name, dim(plotPreci)[1])
return(plotPreci)
} else {
return(plotPreci)
}
}
#' Combine bars together
#' @param ... different barplots generated by \code{getPreciBar(, output = 'ggplot')}, refer to details.
#' @details
#' ..., representing different ouput generated by \code{getPreciBar(, output = 'ggplot')}, they
#' have to be of the same type, e.g.,
#' 1. Jan precipitation of different years, Feb precipitation of different years, and...
#' They are both monthly precipitation, and they share x axis.
#'
#' 2. Mean monthly precipitation of different dataset. e.g., long term mean monthly precipitation
#' and short term mean monthly precipitation. They are both mean monthly precipitation.
#'
#' @param nrow A number showing the number of rows.
#' @param list If input is a list containing different ggplot data, use l\code{list = inputlist}.
#' NOTE: yOU HAVE TO PUT A \code{list = }, before your list.
#' @param x A string of x axis name.
#' @param y A string of y axis name.
#' @param title A string of the title.
#' @param output A boolean, if chosen TRUE, the output will be given.
#' @return A combined barplot.
#' @examples
#'
#' data(tgridData)# the result of \code{loadGridData{ecomsUDG.Raccess}}
#' #output type of getPreciBar() has to be 'ggplot'.
#' b1 <- getPreciBar(tgridData, method = 2, output = 'ggplot', name = 'b1')
#' b2 <- getPreciBar(tgridData, method = 3, output = 'ggplot', name = 'b2')
#'
#' getPreciBar_comb(b1, b2)
#'
#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/
#'
#' @export
#' @import ggplot2
#' @references
#'
#' \itemize{
#' \item H. Wickham. ggplot2: elegant graphics for data analysis. Springer New York, 2009.
#' }
#'
getPreciBar_comb <- function(..., list = NULL, nrow = 1, x = '', y = '', title = '', output = FALSE) {
if (!is.null(list)) {
data_ggplot <- do.call('rbind', list)
} else {
bars <- list(...)
checkBind(bars, 'rbind')
data_ggplot <- do.call('rbind', bars)
}
if (!class(data_ggplot) == 'data.frame') {
warning('Your input is probably a list, but you forget to add "list = " before it.
Try again, or check help for more information.')
} else if (is.null(data_ggplot$Name)) {
stop('No "Name" column in the input data, check the arguments in getPreciBar(), if
output = "ggplot" is assigned, more info please check ?getPreciBar.')
}
data_ggplot$Name <- factor(data_ggplot$Name, levels = unique(data_ggplot$Name), ordered = TRUE)
theme_set(theme_bw())
mainLayer <- with(data_ggplot, {
ggplot(data_ggplot) +
geom_bar(aes(x = Index, y = Preci),fill = 'cyan2', stat = 'identity',
colour = 'black', width = rel(.4)) +
facet_wrap( ~ Name, nrow = nrow) +
theme(plot.title = element_text(size = rel(1.6), face = 'bold'),
axis.title.x = element_text(size = rel(1.6)),
axis.title.y = element_text(size = rel(1.6)),
axis.text.x = element_text(angle = 90, hjust = 1, size = rel(1.9)),
axis.text.y = element_text(size = rel(1.9))) +
labs(x = x, y = y, title = title)
})
if (!any(is.na(match(c('minValue', 'maxValue'), colnames(data_ggplot))))) {
rangeLayer <- with(data_ggplot, {
geom_errorbar(aes(x = Index, ymax = maxValue, ymin = minValue), width = rel(0.3))
})
mainLayer <- mainLayer + rangeLayer
}
suppressWarnings(print(mainLayer))
if (output == TRUE) return(data_ggplot)
}
b1 <- getPreciBar(tgridData, method = 'annual')
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
b1 <- getPreciBar(tgridData, method = 'annual')
devtools::check()
b1 <- getPreciBar(tgridData, method = 'annual')
b1 <- getPreciBar(tgridData, method = 'annual', cell(4,5))
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(4,5))
Q
devtools::check()
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(4,5))
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(14,5))
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(10,5))
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(10,2))
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(5,5))
debug(getPreciBar)
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(5,5))
n
Q
debug(getPreciBar.list)
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(5,5))
undebug(getPreciBar)
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(5,5))
data[cell[1], cell[2], ]
str(data)
data[5, 3, ]
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(5,3))
b1 <- getPreciBar(tgridData, method = 'annual')
b1 <- getPreciBar(tgridData, method = 'annual', cell = c(5,3))
str(data)
b1 <- getPreciBar(tgridData, method = 2, output = 'ggplot', name = 'b1')
undebug(getPreciBar.list)
b2 <- getPreciBar(tgridData, method = 3, output = 'ggplot', name = 'b2')
b1 <- getPreciBar(tgridData, method = 2, output = 'ggplot', name = 'b1')
getPreciBar_comb(b1, b2)
getPreciBar_comb(b1, b2, nrow = 2)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
debug(hyfoUpdates)
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
if (grepl('Version', message_out)) {
packageStartupMessage(message_out)
}
}
}
debug(hyfoUpdates)
hyfoUpdates()
bn
page
upn
version
version_local
version_msg
strsplit('1.2.8', sep = '.')
strsplit('1.2.8')
strsplit('1.2.8', split = '.')
strsplit('1.2.8', split = '.')[1]
strsplit('1.2.8', split = '2')
strsplit('1.2.8', split = '.')
strsplit('1.2.8', split = '/.')
strsplit('1.2.8', split = '\.')
strsplit('1.2.8', split = '//.')
strsplit('1.2.8', split = "")
strsplit('1.2.8', split = ".")
strsplit('1.2.8', split = " .")
?strsplit
strsplit('1.2.8', split = "[.]")
unlist(strsplit('1.2.8', split = "[.]"))
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# the first tow digit is the most important part of the version
version12 <- unlist(strsplit(version, split = "[.]"))[1:2]
version_local12 <- unlist(strsplit(version_local1, split = "[.]"))[1:2]
sameVersion <- version12 == version_local12
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (!sameVersion) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
if (grepl('Version', message_out)) {
packageStartupMessage(message_out)
}
}
}
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# the first tow digit is the most important part of the version
version12 <- unlist(strsplit(version, split = "[.]"))[1:2]
version_local12 <- unlist(strsplit(version_local1, split = "[.]"))[1:2]
sameVersion <- version12 == version_local12
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (!sameVersion) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
if (grepl('Version', message_out)) {
packageStartupMessage(message_out)
}
}
}
debug(hyfoUpdates)
hyfoUpdates()
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# the first tow digit is the most important part of the version
version12 <- unlist(strsplit(version, split = "[.]"))[1:2]
version_local12 <- unlist(strsplit(version_local, split = "[.]"))[1:2]
sameVersion <- version12 == version_local12
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (!sameVersion) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
if (grepl('Version', message_out)) {
packageStartupMessage(message_out)
}
}
}
debug(hyfoUpdates)
hyfoUpdates()
version12
version_local12
sameVersion
## For package updates information
#' @importFrom utils packageDescription
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# the first tow digit is the most important part of the version
version12 <- unlist(strsplit(version, split = "[.]"))[1:2]
version_local12 <- unlist(strsplit(version_local, split = "[.]"))[1:2]
sameVersion <- version12 == version_local12
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by type in: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (any(sameVersion == FALSE)) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message_out <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
if (!is.null(message_out)) {
if (grepl('Version', message_out)) {
packageStartupMessage(message_out)
}
}
}
debug(hyfoUpdates)
hyfoUpdates()
N
sameVersion
message_out
devtools::document()
devtools::check()
devtools::check()
library(hyfo)
