data <- read.csv(fileName, skip = 1)
head(data)
data <- read.csv(fileName, skip = 0，header = F)
head(data)
fileName <- file.choose()
data <- read.csv(fileName, skip = 0，header = F)
head(data)
folderName
folderName <- dir.choose()
folderName <- choose.dir()
fileNames <- list.files(folderName, pattern = '*.csv', full.names = T)
collectData_csv <- function(folderName, range = NULL){
if(length(range) > 4){
stop ('"range" should be c(startRow, endRow, startCol, endCol)')
}else if (is.null(range)){
stop('"range" can not be blank, e.g., range <- c(startRow, endRow, startCol, endCol)')
}
fileNames <- list.files(folderName, pattern = '*.csv', full.names = T)
data <- lapply(fileNames, readColumn_csv, range = range)
data <- do.call('rbind', data)
return (data)
}
readColumn_csv <- function(fileName, range){
data <- read.csv(fileName, skip = range[1] - 1, header = F)
data <- data[1:(range[2] - range[1] + 1),]
endIndex <- which(data=='',arr.ind=T)[1]-1
data <- data[1:endIndex,]
return (data)
}
data <- lapply(fileNames, readColumn_csv, range = range)
range <- c(5,15,1,2)
data <- lapply(fileNames, readColumn_csv, range = range)
collectData_csv(folderName, range)
debug(collectData_csv)
collectData_csv(folderName, range)
range
data
data
readColumn_csv <- function(fileName, range){
data <- read.csv(fileName, skip = range[1] - 1, header = F)
data <- data[1:(range[2] - range[1] + 1),]
data <- data[1:endIndex, range[3]:range[4]]
return (data)
}
collectData_csv(folderName, range)
data
data
readColumn_csv <- function(fileName, range){
data <- read.csv(fileName, skip = range[1] - 1, header = F)
data <- data[1:(range[2] - range[1] + 1), range[3]:range[4]]
return (data)
}
collectData_csv(folderName, range)
data
data
data
devtools::document()
folderName <- choose.dir()
fileNames <- list.files(folderName, pattern = '*.txt', full.names = T)
fileNames
length(fileNames)
fileNames <- list.files(folderName, pattern = '*.TXT', full.names = T)
fileNames
fileName <- file.choose()
data <- read.table(fileName)
data <- read.txt(fileName)
data <- read.lines(fileName)
data <- read.table(fileName, fill = T)
data
head(data)
fileName <- file.choose()
data <- read.table(fileName, fill = T)
data
head(data)
data[2,]
data[5,]
fileName <- file.choose()
data <- read.table(fileName, fill = T)
data
fileName <- file.choose()
data <- read.csv(fileName, fill = T)
data <- read.csv(fileName, skip = 4)
data
fileName <- file.choose()
data <- read.table(fileName, fill = T)
data
data[2,]
data[20,]
data[200,]
data[½:3,]
data[1:3,]
data[1:10,]
data <- read.table(fileName, skip = 4)
data
data <- read.table(fileName, skip = 14)
ddata
data[,3]
data <- readLines(fileName, skip = 14)
data
data[,3]
dim(data)
data[1:40,]
data[1:40]
data <- read.table(fileName, fill = T)
data
data[1:40,]
data <- readLines(fileName, skip = 14)
data <- readLines(fileName, skip = 14)
data <- readLines(fileName)
data
range
data <- data[range[1], range[2]]
data <- data[range[1]:range[2]]
data
aa <- data.frame(data)
aa
aa[,8:10]
dim(aa)
aa <- data.frame(data[6:11,])
aa <- data.frame(data[6:11])
aa
dim(aa)
data <- readLines(fileName)
data <- data[range[1]:range[2]]
data
aa <- read.table(data)
aa <- read.table(text = data)
aa
data
data[1]
data[8]
line.split(data[8])
strsplit(data[8])
strSplit(data[8])
strsplit(data[8])
strsplit(data[8], split = '')
strsplit(data[8], split = ' ')
data <- readLines(fileName)
data <- data[15:30
]
data
read.table(data)
read.table(data, sep = '')
data <- readLines(fileName)
data <- data[range[1]:range[2]]
data[1]
data[10]
strsplit(data[10])
strsplit(data[10], sep = ' ')
strsplit(data[10], sep = '.')
strsplit(data[10], split = '.')
strsplit(data[10], split = ' ')
data
read.fwf(data)
read.fwf(data, widths = c(10,13))
read.fwf(data, widths = rep(10,13))
data <- read.table(fileName)
data <- read.table(fileName, header = T)
data <- read.table(fileName, skip = 4 )
data <- scan(fileName, skip = 4 )
data <- read.table(fileName, skip = 4)
data <- read.table(fileName, skip = 6)
data <- read.table(fileName, skip = 8)
data <- read.table(fileName, skip = 4)
data <- read.table(fileName, skip = 14)
data <- read.table(fileName, skip = 10)
data <- read.table(fileName, skip = 10)
data <- read.table(fileName, fill = t)
data <- read.table(fileName, fill = T)
data
data[1,]
data[10,]
data[30,]
data[300,]
data <- read.table(fileName, skip = 4)
data <- read.table(fileName, skip = 5)
data <- read.table(fileName, skip = 6)
data <- read.table(fileName, skip = 2)
readColumn_txt <- function(fileNames, range){
data <- readLines(fileName)
data <- data[range[1]:range[2]]
return (data)
}
folderName
debug(readColumn_txt)
data <- lapply(fileNames, readColumn_txt, range = range)
data
data
folderName <- choose.dir()
range <- c(10,20,2,3)
data <- lapply(fileNames, readColumn_txt, range = range)
data
data <- lapply(fileNames, readColumn_txt, range = range)
fileName
fileName
fileNames
readColumn_txt <- function(fileNames, range){
data <- readLines(fileName)
data <- data[range[1]:range[2]]
return (data)
}
data <- lapply(fileNames, readColumn_txt, range = range)
data
debug(readColumn_txt)
data <- lapply(fileNames, readColumn_txt, range = range)
fileNamQ
readColumn_txt <- function(fileName, range){
data <- readLines(fileName)
data <- data[range[1]:range[2]]
return (data)
}
data <- lapply(fileNames, readColumn_txt, range = range)
data
data <- do.call('rbind', data)
data
dim(data)
data <- lapply(fileNames, readColumn_txt, range = range)
data
data[[1]]
data
data <- do.call('rbind', data)
data
data <- lapply(fileNames, readColumn_txt, range = range)
data
a1 <- rbind(data[[1]], data[[2]])
a1
unlist(data)
data <- lapply(fileNames, readColumn_txt, range = range)
data <- unlist(data)
data
dim(data)
data[2]
data[12]
data[22]
data[22,1]
collectData <- function(folderName, fileType = NULL, range = NULL){
if (is.null(fileType)) stop ('Please enter fileType, "txt", "csv" or "excel".')
if(length(range) > 4){
stop ('"range" should be c(startRow, endRow, startCol, endCol)')
}else if (is.null(range)){
stop('"range" can not be blank, e.g., range <- c(startRow, endRow, startCol, endCol).')
}
if (fileType == 'csv') {
fileNames <- list.files(folderName, pattern = '*.csv', full.names = T)
data <- lapply(fileNames, readColumn_csv, range = range)
data <- do.call('rbind', data)
}else if (fileType == 'txt'){
fileNames <- list.files(folderName, pattern = '*.txt', full.names = T)
if (length(fileNames) == 0){
fileNames <- list.files(folderName, pattern = '*.TXT', full.names = T)
}
message ('For txt file, only startRow and endRow will be considered.')
data <- lapply(fileNames, readColumn_txt, range = range)
data <- unlist(data)
}else if (fileType == 'excel'){
}else{
stop ('fileType should be "txt", "csv" or "excel".')
}
return (data)
}
readColumn_txt <- function(fileName, range){
data <- readLines(fileName)
data <- data[range[1]:range[2]]
return (data)
}
folderName
collectData(folderName, 'txt', range = c(15,55,1,5))
collectData(folderName, 'txt', range = c(10,35,1,5))
sheetIndex <- 1
fileName <- file.choose()
data <- read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(10,20), colIndex = seq(1,13))
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(10,20), colIndex = seq(1,13))
data
dim(data)
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(10,20), colIndex = seq(1,12))
data
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(10,20), colIndex = seq(2,12))
data
readColumn_excel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
return (data)
}
debug(readColumn_excel)
data <- lapply(fileNames, readColumn_excel, range = range, sheetIndex = sheetIndex)
range
data <- lapply(fileNames, readColumn_excel, range = range, sheetIndex = sheetIndex)
sheetIndex
data <- lapply(fileNames, readColumn_excel, range = range, sheetIndex = sheetIndex)
data <- lapply(fileNames, readColumn_excel, range = range, sheetIndex = sheetIndex)
fileName
folderName <- choose.dir()
fileNames <- list.files(folderName, pattern = '*.xlsx', full.names = T)
fileNames
if (length(fileNames) == 0){
fileNames <- list.files(folderName, pattern = '*.xls', full.names = T)
}
fileNames
if (length(fileNames) == 0) stop ('No excel in the folder.')
debug(readColumn_excel)
data <- lapply(fileNames, readColumn_excel, range = range, sheetIndex = sheetIndex)
data
data <- lapply(fileNames, readColumn_excel, range = range, sheetIndex = sheetIndex)
undebug(readColumn_excel)
data <- lapply(fileNames, readColumn_excel, range = range, sheetIndex = sheetIndex)
data
readColumn_excel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
print (fileName)
return (data)
}
readExcel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
print (fileName)
return (data)
}
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
readExcel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
message (fileName)
return (data)
}
seach()
search()
data
do.call('rbind', data)
readExcel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
message (fileName)
colnames(data) <- seq(1, length(range[4] - range[3] + 1))
return (data)
}
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
data <- do.call('rbind', data)
warnings()
data
colnames(data)
debug(readExcel)
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
data
length(range[4] - range[3] + 1)
range[4] - range[3]
q
readExcel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
message (fileName)
colnames(data) <- seq(1, length(range[4] - range[3]) + 1)
return (data)
}
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
data <- do.call('rbind', data)
debug(readExcel)
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
data
range
range <- c(9, 20, 2, 8)
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
data
length(range[4] - range[3]) + 1
range[4] - range[3]
length(range[4] - range[3])
#'@importFrom xlsx read.xlsx
readExcel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
message (fileName)
colnames(data) <- seq(1, range[4] - range[3] + 1)
return (data)
}
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
fileName <- file.choose()
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
data
colnames(data) <- seq(1, range[4] - range[3] + 1)
data
dim(data)
readExcel <- function(fileName, range, sheetIndex){
data <- xlsx::read.xlsx(fileName, sheetIndex = sheetIndex, rowIndex = seq(range[1], range[2]),
colIndex = seq(range[3], range[4]))
colnames(data) <- seq(1, dim(data)[2])
message (fileName)
return (data)
}
#' check if the data is available for \code{rbind()} or \code{cbind()}
#'
#' @param data A list containing different sublists ready to be processed by \code{do.call('rbind')}
#' or \code{do.call('cbind')}
#' @param bind A string showing which bind you are going to use can be 'rbind' or 'cbind'
#' @return data can be processed by bind function; data cannot be processed by bind function
#' @examples
#' data <- list(c(1,1,1),c(2,2,2))
#' bind <- 'rbind'
#' checkBind(data,bind)
#' @export
checkBind <- function(data,bind){
# data has to be a list of values, and will be used in do.call('rbind')
message ('check if the data list is available for rbind or cbind...')
if (bind == 'rbind'){
colNum <- sapply(data,function(x) dim(x)[2])
colLev <- unique(colNum)
if (length(colLev) != 1){
dif <- colLev[2]
difNum <- which(colNum == dif)
stop (sprintf('different Colomn number in %s th of the data list',difNum))
}
}else if (bind =='cbind'){
rowNum <- sapply(data,function(x) dim(x)[1])
}
message ('Data list is OK')
}
#' check if the data is available for \code{rbind()} or \code{cbind()}
#'
#' @param data A list containing different sublists ready to be processed by \code{do.call('rbind')}
#' or \code{do.call('cbind')}
#' @param bind A string showing which bind you are going to use can be 'rbind' or 'cbind'
#' @return data can be processed by bind function; data cannot be processed by bind function
#' @examples
#' data <- list(c(1,1,1),c(2,2,2))
#' bind <- 'rbind'
#' checkBind(data,bind)
#' @export
checkBind <- function(data, bind){
# data has to be a list of values, and will be used in do.call('rbind')
message ('check if the data list is available for rbind or cbind...')
if (bind == 'rbind'){
colNum <- sapply(data,function(x) dim(x)[2])
colLev <- unique(colNum)
if (length(colLev) != 1){
dif <- colLev[2]
difNum <- which(colNum == dif)
stop (sprintf('different Colomn number in %s th of the data list',difNum))
}
}else if (bind =='cbind'){
rowNum <- sapply(data,function(x) dim(x)[1])
}
message ('Data list is OK')
}
data <- lapply(fileNames, readExcel, range = range, sheetIndex = sheetIndex)
checkBind(data, 'rbind')
checkBind <- function(data, bind){
# data has to be a list of values, and will be used in do.call('rbind')
message ('check if the data list is available for rbind or cbind...')
if (bind == 'rbind'){
colNum <- sapply(data,function(x) dim(x)[2])
colLev <- unique(colNum)
if (length(colLev) != 1){
dif <- colLev[2]
difNum <- which(colNum == dif)
stop (sprintf('different Colomn number in %s th of the data list \n',difNum))
}
}else if (bind =='cbind'){
rowNum <- sapply(data,function(x) dim(x)[1])
}
message ('Data list is OK')
}
checkBind(data, 'rbind')
#' check if the data is available for \code{rbind()} or \code{cbind()}
#'
#' @param data A list containing different sublists ready to be processed by \code{do.call('rbind')}
#' or \code{do.call('cbind')}
#' @param bind A string showing which bind you are going to use can be 'rbind' or 'cbind'
#' @return data can be processed by bind function; data cannot be processed by bind function
#' @examples
#' data <- list(c(1,1,1),c(2,2,2))
#' bind <- 'rbind'
#' checkBind(data,bind)
#' @export
checkBind <- function(data, bind){
# data has to be a list of values, and will be used in do.call('rbind')
message ('Check if the data list is available for rbind or cbind...')
if (bind == 'rbind'){
colNum <- sapply(data,function(x) dim(x)[2])
colLev <- unique(colNum)
if (length(colLev) != 1){
dif <- colLev[2]
difNum <- which(colNum == dif)
stop (sprintf('Different Colomn number in %s th of the data list \n',difNum))
}
}else if (bind =='cbind'){
rowNum <- sapply(data,function(x) dim(x)[1])
}
message ('Data list is OK')
}
devtools::document()
debug(lapply)
data <- lapply(fileNames, readCsv, range = range)
q
q
q
q
q
q
q
q
devtools::document()
q
q
q
q
q
fff
Q
undebug(lapply)
devtools::document()
devtools::document()
devtools::document()
