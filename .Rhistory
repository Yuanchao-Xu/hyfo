}
extrapolate <- biasFactor@extrapolate
if (!is.null(extrapolate) & extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
input <- biasFactor@input
if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'array',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
a <- new('biasFactor', memberDim = 3)
debug(check_biasFactor)
a <- new('biasFactor', memberDim = 3)
?new
check_biasFactor(a)
biasFactor@biasFactor
is.null(biasFactor@biasFactor)
length(biasFactor@biasFactor)
##### For biasFactor class
check_biasFactor <- function(biasFactor) {
errors <- character()
if (length(biasFactor@biasFactor) == 0) {
msg <- 'First you should have a list of biasFactors, then create the biasFactor object.'
errors <- c(errors, msg)
}
length_memberDim <- length(biasFactor@memberDim)
if (length_memberDim != 1) {
msg <- paste('memberDim is length ', length_memberDim, '.  Should be 1', sep = '')
errors <- c(errors, msg)
}
length_lonLatDim <- length(biasFactor@lonLatDim)
if (length_lonLatDim != 2) {
msg <- paste('lonLatDim is length ', length_lonLatDim, '. Should be 2', sep = '')
errors <- c(errors, msg)
}
if (is.null(biasFactor@method)) {
msg <- 'method should not be empty.'
errors <- c(errors, msg)
}
if (is.null(biasFactor@preci)) {
msg <- 'preci should not be empty.'
errors <- c(errors, msg)
}
prThreshold <- biasFactor@prThreshold
if (!is.null(prThreshold) & prThreshold < 0) {
msg <- 'prThreshold should be greater than 0.'
errors <- c(errors, msg)
}
scaleType <- biasFactor@scaleType
if (!is.null(scaleType) & scaleType != 'multi' & scaleType != 'add') {
msg <- paste('scaleType is ', scaleType, '. Should be "multi" or "add".', sep = '')
errors <- c(errors, msg)
}
extrapolate <- biasFactor@extrapolate
if (!is.null(extrapolate) & extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
input <- biasFactor@input
if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'array',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
check_biasFactor(a)
debug(check_biasFactor)
check_biasFactor(a)
length(biasFactor@biasFactor) == 0
biasFactor@method
check_biasFactor(a)
biasFactor@memberDim
biasFactor@memberDim != 'dd'
##### For biasFactor class
check_biasFactor <- function(biasFactor) {
errors <- character()
if (length(biasFactor@biasFactor) == 0) {
msg <- 'First you should have a list of biasFactors, then create the biasFactor object.'
errors <- c(errors, msg)
}
length_memberDim <- length(biasFactor@memberDim)
if (length_memberDim != 0 & length_memberDim != 1) {
msg <- paste('memberDim is length ', length_memberDim, '.  Should be 1', sep = '')
errors <- c(errors, msg)
}
length_lonLatDim <- length(biasFactor@lonLatDim)
if (length_lonLatDim != 2) {
msg <- paste('lonLatDim is length ', length_lonLatDim, '. Should be 2', sep = '')
errors <- c(errors, msg)
}
if (length(biasFactor@method) == 0) {
msg <- 'method should not be empty.'
errors <- c(errors, msg)
}
if (is.null(biasFactor@preci)) {
msg <- 'preci should not be empty.'
errors <- c(errors, msg)
}
prThreshold <- biasFactor@prThreshold
if (length(prThreshold) != 0 & prThreshold < 0) {
msg <- 'prThreshold should be greater than 0.'
errors <- c(errors, msg)
}
scaleType <- biasFactor@scaleType
if (length(scaleType) != 0 & scaleType != 'multi' & scaleType != 'add') {
msg <- paste('scaleType is ', scaleType, '. Should be "multi" or "add".', sep = '')
errors <- c(errors, msg)
}
extrapolate <- biasFactor@extrapolate
if (length(extrapolate) != 0 & extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
input <- biasFactor@input
if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'array',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
debug(check_biasFactor)
check_biasFactor(a)
length_lonLatDim
##### For biasFactor class
check_biasFactor <- function(biasFactor) {
errors <- character()
if (length(biasFactor@biasFactor) == 0) {
msg <- 'First you should have a list of biasFactors, then create the biasFactor object.'
errors <- c(errors, msg)
}
length_memberDim <- length(biasFactor@memberDim)
if (length_memberDim != 0 & length_memberDim != 1) {
msg <- paste('memberDim is length ', length_memberDim, '.  Should be 1', sep = '')
errors <- c(errors, msg)
}
length_lonLatDim <- length(biasFactor@lonLatDim)
if (length_lonLatDim != 2) {
msg <- paste('lonLatDim is length ', length_lonLatDim, '. Should be 2', sep = '')
errors <- c(errors, msg)
}
if (length(biasFactor@method) == 0) {
msg <- 'method should not be empty.'
errors <- c(errors, msg)
}
if (length(biasFactor@preci) == 0) {
msg <- 'preci should not be empty.'
errors <- c(errors, msg)
}
prThreshold <- biasFactor@prThreshold
if (length(prThreshold) != 0 & prThreshold < 0) {
msg <- 'prThreshold should be greater than 0.'
errors <- c(errors, msg)
}
scaleType <- biasFactor@scaleType
if (length(scaleType) != 0 & scaleType != 'multi' & scaleType != 'add') {
msg <- paste('scaleType is ', scaleType, '. Should be "multi" or "add".', sep = '')
errors <- c(errors, msg)
}
extrapolate <- biasFactor@extrapolate
if (length(extrapolate) != 0 & extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
input <- biasFactor@input
if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'array',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
debug(check_biasFactor)
check_biasFactor(a)
nn
nn
length(prThreshold) != 0 & prThreshold < 0
length(prThreshold) != 0
length(prThreshold)
length(prThreshold) != 0 & prThreshold < 0
prThreshold < 0
##### For biasFactor class
check_biasFactor <- function(biasFactor) {
errors <- character()
if (length(biasFactor@biasFactor) == 0) {
msg <- 'First you should have a list of biasFactors, then create the biasFactor object.'
errors <- c(errors, msg)
}
length_memberDim <- length(biasFactor@memberDim)
if (length_memberDim != 0 & length_memberDim != 1) {
msg <- paste('memberDim is length ', length_memberDim, '.  Should be 1', sep = '')
errors <- c(errors, msg)
}
length_lonLatDim <- length(biasFactor@lonLatDim)
if (length_lonLatDim != 2) {
msg <- paste('lonLatDim is length ', length_lonLatDim, '. Should be 2', sep = '')
errors <- c(errors, msg)
}
if (length(biasFactor@method) == 0) {
msg <- 'method should not be empty.'
errors <- c(errors, msg)
}
if (length(biasFactor@preci) == 0) {
msg <- 'preci should not be empty.'
errors <- c(errors, msg)
}
prThreshold <- biasFactor@prThreshold
if (length(prThreshold) != 0) {
if (prThreshold < 0) {
msg <- 'prThreshold should be greater than 0.'
errors <- c(errors, msg)
}
}
scaleType <- biasFactor@scaleType
if (length(scaleType) != 0) {
if (scaleType != 'multi' & scaleType != 'add') {
msg <- paste('scaleType is ', scaleType, '. Should be "multi" or "add".', sep = '')
errors <- c(errors, msg)
}
}
extrapolate <- biasFactor@extrapolate
if (length(extrapolate) != 0) {
if (extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
}
input <- biasFactor@input
if (length(input) == 0) {
msg <- 'input should not be empty.'
errors <- c(errors, msg)
}
if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'array',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
check_biasFactor(a)
##### For biasFactor class
check_biasFactor <- function(biasFactor) {
errors <- character()
if (length(biasFactor@biasFactor) == 0) {
msg <- 'First you should have a list of biasFactors, then create the biasFactor object.'
errors <- c(errors, msg)
}
length_memberDim <- length(biasFactor@memberDim)
if (length_memberDim != 0 & length_memberDim != 1) {
msg <- paste('memberDim is length ', length_memberDim, '.  Should be 1', sep = '')
errors <- c(errors, msg)
}
length_lonLatDim <- length(biasFactor@lonLatDim)
if (length_lonLatDim != 2) {
msg <- paste('lonLatDim is length ', length_lonLatDim, '. Should be 2', sep = '')
errors <- c(errors, msg)
}
if (length(biasFactor@method) == 0) {
msg <- 'method should not be empty.'
errors <- c(errors, msg)
}
if (length(biasFactor@preci) == 0) {
msg <- 'preci should not be empty.'
errors <- c(errors, msg)
}
prThreshold <- biasFactor@prThreshold
if (length(prThreshold) != 0) {
if (prThreshold < 0) {
msg <- 'prThreshold should be greater than 0.'
errors <- c(errors, msg)
}
}
scaleType <- biasFactor@scaleType
if (length(scaleType) != 0) {
if (scaleType != 'multi' & scaleType != 'add') {
msg <- paste('scaleType is ', scaleType, '. Should be "multi" or "add".', sep = '')
errors <- c(errors, msg)
}
}
extrapolate <- biasFactor@extrapolate
if (length(extrapolate) != 0) {
if (extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
}
input <- biasFactor@input
if (length(input) == 0) {
msg <- 'input should not be empty.'
errors <- c(errors, msg)
} else if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'array',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
check_biasFactor(a)
a <- new('biasFactor', memberDim = 3)
##### For biasFactor class
check_biasFactor <- function(biasFactor) {
errors <- character()
if (length(biasFactor@biasFactor) == 0) {
msg <- 'biasFactors should not be empty.'
errors <- c(errors, msg)
}
length_memberDim <- length(biasFactor@memberDim)
if (length_memberDim != 0 & length_memberDim != 1) {
msg <- paste('memberDim is length ', length_memberDim, '.  Should be 1', sep = '')
errors <- c(errors, msg)
}
length_lonLatDim <- length(biasFactor@lonLatDim)
if (length_lonLatDim != 2) {
msg <- paste('lonLatDim is length ', length_lonLatDim, '. Should be 2', sep = '')
errors <- c(errors, msg)
}
if (length(biasFactor@method) == 0) {
msg <- 'method should not be empty.'
errors <- c(errors, msg)
}
if (length(biasFactor@preci) == 0) {
msg <- 'preci should not be empty.'
errors <- c(errors, msg)
}
prThreshold <- biasFactor@prThreshold
if (length(prThreshold) != 0) {
if (prThreshold < 0) {
msg <- 'prThreshold should be greater than 0.'
errors <- c(errors, msg)
}
}
scaleType <- biasFactor@scaleType
if (length(scaleType) != 0) {
if (scaleType != 'multi' & scaleType != 'add') {
msg <- paste('scaleType is ', scaleType, '. Should be "multi" or "add".', sep = '')
errors <- c(errors, msg)
}
}
extrapolate <- biasFactor@extrapolate
if (length(extrapolate) != 0) {
if (extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
}
input <- biasFactor@input
if (length(input) == 0) {
msg <- 'input should not be empty.'
errors <- c(errors, msg)
} else if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'array',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
a <- new('biasFactor', biasFactor = biasFactor[[1]], memberDim = biasFactor$memberDim, lonLatDim = biasFactor$lonLatDim,
method = biasFactor$method, preci = biasFactor$preci, prThreshold = biasFactor$prThreshold,
scaleType = biasFactor$scaleType, extrapolate = biasFactor$extrapolate, input = biasFactor$input)
biasFactor$lonLatDim
class(biasFactor$lonLatDim)
##### For biasFactor class
check_biasFactor <- function(biasFactor) {
errors <- character()
if (length(biasFactor@biasFactor) == 0) {
msg <- 'biasFactors should not be empty.'
errors <- c(errors, msg)
}
length_memberDim <- length(biasFactor@memberDim)
if (length_memberDim != 0 & length_memberDim != 1) {
msg <- paste('memberDim is length ', length_memberDim, '.  Should be 1', sep = '')
errors <- c(errors, msg)
}
length_lonLatDim <- length(biasFactor@lonLatDim)
if (length_lonLatDim != 2) {
msg <- paste('lonLatDim is length ', length_lonLatDim, '. Should be 2', sep = '')
errors <- c(errors, msg)
}
if (length(biasFactor@method) == 0) {
msg <- 'method should not be empty.'
errors <- c(errors, msg)
}
if (length(biasFactor@preci) == 0) {
msg <- 'preci should not be empty.'
errors <- c(errors, msg)
}
prThreshold <- biasFactor@prThreshold
if (length(prThreshold) != 0) {
if (prThreshold < 0) {
msg <- 'prThreshold should be greater than 0.'
errors <- c(errors, msg)
}
}
scaleType <- biasFactor@scaleType
if (length(scaleType) != 0) {
if (scaleType != 'multi' & scaleType != 'add') {
msg <- paste('scaleType is ', scaleType, '. Should be "multi" or "add".', sep = '')
errors <- c(errors, msg)
}
}
extrapolate <- biasFactor@extrapolate
if (length(extrapolate) != 0) {
if (extrapolate != 'no' & extrapolate != 'constant') {
msg <- paste('extrapolate is ', extrapolate, '. Should be "no" or "constant".', sep = '')
errors <- c(errors, msg)
}
}
input <- biasFactor@input
if (length(input) == 0) {
msg <- 'input should not be empty.'
errors <- c(errors, msg)
} else if (input != 'hyfo' & input != 'TS') {
msg <- paste('input is ', input, '. Should be "hyfo" or "TS".', sep = '')
errors <- c(errors, msg)
}
if (length(errors) == 0) TRUE else errors
}
setClass("biasFactor", representation(biasFactor = 'list', memberDim = 'numeric', lonLatDim = 'integer',
method = 'character', preci = 'logical', prThreshold = 'numeric',
scaleType = 'character', extrapolate = 'character', input = 'character'),
validity = check_biasFactor)
a <- new('biasFactor', biasFactor = biasFactor[[1]], memberDim = biasFactor$memberDim, lonLatDim = biasFactor$lonLatDim,
method = biasFactor$method, preci = biasFactor$preci, prThreshold = biasFactor$prThreshold,
scaleType = biasFactor$scaleType, extrapolate = biasFactor$extrapolate, input = biasFactor$input)
##### For hyfo class
# there should be a hyfo class, but this package can interect with downscaleR, so better
# keep them in accordance.
# setClass("hyfo", representation(varName = "character", xyCoords = 'list', Dates = 'list',
#                                 Data = 'array', Members = 'array', Loaded = 'character'))
# test <- new("hyfo", varName = "pr", xyCoords = nc$xyCoords, Dates = nc$Dates, Data = nc$Data,
#               Members = nc$Members, Loaded = nc$Loaded)
str(a)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
