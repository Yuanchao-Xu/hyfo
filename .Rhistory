gridData$Dates$start <- gridData$Dates$start[targetMonIndex]
gridData$Dates$end <- gridData$Dates$end[targetMonIndex]
timeDim <- match('time', attributes(gridData$Data)$dimensions)
gridData$Data <- chooseDim(gridData$Data, timeDim, targetMonIndex)
}
if (!is.null(lon)) {
lonIndex <- gridData$xyCoords$x
lonI1 <- which(abs(lonIndex - min(lon)) == min(abs(lonIndex - min(lon)), na.rm = TRUE))
lonI2 <- which(abs(lonIndex - max(lon)) == min(abs(lonIndex - max(lon)), na.rm = TRUE))
# take the as large as possible range
targetLonIndex <- lonI1[length(lonI1)]:lonI2[length(lonI2)]
if (length(targetLonIndex) == 0) stop('Your input lon is too small, try to expand the
longitude range.')
gridData$xyCoords$x <- gridData$xyCoords$x[targetLonIndex]
lonDim <- match('lon', attributes(gridData$Data)$dimensions)
gridData$Data <- chooseDim(gridData$Data, lonDim, targetLonIndex)
}
if (!is.null(lat)) {
latIndex <- gridData$xyCoords$y
latI1 <- which(abs(latIndex - min(lat)) == min(abs(latIndex - min(lat)), na.rm = TRUE))
latI2 <- which(abs(latIndex - max(lat)) == min(abs(latIndex - max(lat)), na.rm = TRUE))
targetLatIndex <- latI1[length(latI1)]:latI2[length(latI2)]
if (length(targetLonIndex) == 0) stop('Your input lat is too small, try to expand the
latitude range.')
gridData$xyCoords$y <- gridData$xyCoords$y[targetLatIndex]
latDim <- match('lat', attributes(gridData$Data)$dimensions)
gridData$Data <- chooseDim(gridData$Data, latDim, targetLatIndex)
}
return(gridData)
}
output <- downscaleNcdf(gridData, ...)
output <- downscaleNcdf(gridData)
str(gridData)
name <- gridData$Variable$varName
filePath <- file.choose(new = T)
missingValue = 1e20
units = NULL
name <- gridData$Variable$varName
dimLon <- ncdim_def('lon', 'degree', gridData$xyCoords$x)
dimLat <- ncdim_def('lat', 'degree', gridData$xyCoords$y)
dimMem <- NULL
dimMem <- ncdim_def('member', 'members', 1:length(gridData$Members))
dimMem
is.null(gridData$Members)
dimMem <- NULL
if (!is.null(gridData$Members)) {
dimMem <- ncdim_def('member', 'members', 1:length(gridData$Members))
}
# Time needs to be treated seperately
dates <- as.POSIXlt(gridData$Dates$start, tz = tz)
?getTimeUnit
??getTimeUnit
units <- getTimeUnit(dates)
??getTimeUnit
getTimeUnit <- function(dates) {
units <- c('weeks', 'days', 'hours', 'mins', 'secs')
output <- NULL
for (unit in units) {
time <- difftime(dates, dates[1], units = unit)
rem <- sapply(time, function(x) x%%1)
if (!any(rem != 0)) {
output <- unit
break
}
}
return(output)
}
dates <- as.POSIXlt(gridData$Dates$start, tz = tz)
if (is.null(units)) {
units <- getTimeUnit(dates)
time <- difftime(dates, dates[1], units = units)
} else {
time <- difftime(dates, dates[1], units = units)
}
timeUnits <- paste(units, 'since', dates[1])
dimTime <- ncdim_def('time', timeUnits, time)
timeUnits
time
as.numeric(time)
dimTime <- ncdim_def('time', timeUnits, as.numeric(time))
str(dimTime)
dimList <- list(dimLon, dimLat, dimTime, dimMem)
dimList <- Filter(Negate(is.null), dimList)
var <- ncvar_def( name, "units", dimList, missingValue)
nc <- nc_create(filePath, var)
ncatt_put(nc, "time", "standard_name","time")
ncatt_put(nc, "time", "axis","T")
ncatt_put(nc, "time", "_CoordinateAxisType","Time")
#ncatt_put(nc, "time", "_ChunkSize",1)
ncatt_put(nc, "lon", "standard_name","longitude")
ncatt_put(nc, "lon", "_CoordinateAxisType","Lon")
ncatt_put(nc, "lat", "standard_name","latitude")
ncatt_put(nc, "lat", "_CoordinateAxisType","Lat")
if (!is.null(dimMem)){
ncatt_put(nc, "member", "standard_name","realization")
ncatt_put(nc, "member", "_CoordinateAxisType","Ensemble")
#att.put.ncdf(nc, "member", "ref","http://www.uncertml.org/samples/realisation")
}
ncatt_put(nc, 0, "Conventions","CF-1.4")
ncatt_put(nc, 0, 'WrittenBy', 'hyfo(http://yuanchao-xu.github.io/hyfo/)')
dimIndex <- match(c('lon', 'lat', 'time', 'member'), attributes(gridData$Data)$dimensions)
dimIndex <- na.omit(dimIndex)
dimIndex
data <- aperm(gridData$Data, dimIndex)
ncvar_put(nc, name, data)
nc_close(nc)
devtools::document()
devtools::check(cran=T)
devtools::document()
devtools::check(cran=T)
devtools::build()
a <- c(null,null)
a <- c(NULL, NULL)
a
?match
match()
match
x <- c('lon', 'lat', 'time', 'member')
table <- c('longitude', 'latitude')
index <- lapply(x, function(x) {
a <- grep(x, table)
})
a
index
index <- sapply(x, function(x) {
a <- grep(x, table)
})
index
index <- unlist(lapply(x, function(x) {
a <- grep(x, table)
}))
index
table <- c('latitude', 'longitude')
index <- unlist(lapply(x, function(x) {
a <- grep(x, table)
}))
index
table <- c('itude', 'itude')
index <- unlist(lapply(x, function(x) {
a <- grep(x, table)
}))
index
devtools::document()
devtools::check()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::check()
?match
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
library(ncdf4)
?nc_write
??nc_create
devtools::document()
devtools::document()
devtools::check()
devtools::build()
writePath <- file.choose()
writePath <- file.choose(new = T)
library(hyfo)
filePath <- file.choose()
name <- getNcdfVar(filePath)
a <- loadNcdf(filePath, name[6])
str(a)
a$xyCoords$y
attributes(a$xyCoords$y)
attributes(a$xyCoords$y)$name <- 'dafa'
attributes(a$xyCoords$y)
devtools::build()
devtools::check()
devtools::check()
attributes(a$xyCoords$x)$name
?writeNcdf
filePath1 <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath1)
nc <- loadNcdf(filePath1, varname1)
nc <- loadNcdf(filePath1, varname)
str(nc)
nc$xyCoords$x
nc$xyCoords$y
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
writePath <- file.choose(new=T)
writeNcdf(nc, writePath)
a <- loadNcdf(writePath, varname)
str(a)
filePath <- file.choose()
name <- getNcdfVar(filePath)
a <- loadNcdf(filePath, name[6])
writeNcdf(nc, writePath)
b <- loadNcdf(writePath, name[6])
writeNcdf(a, writePath)
b <- loadNcdf(writePath, name[6])
str(b)
str(a)
debug(writeNcdf)
writeNcdf(a, writePath)
str(data)
debug(loadNcdf)
b <- loadNcdf(writePath, name[6])
str(var)
devtools::check()
writeNcdf(a, writePath)
b <- loadNcdf(writePath, name[6])
str(b)
debug(writeNcdf)
writeNcdf(a, writePath)
dimIndex
dimIndex
str(diList)
str(dimList)
str(dimList)
str(dimList)
name
str(var)
str(dimList)
dimIndex
attributes(gridData$Data)$dimensions
str(dimList)
c('lon', 'lat', 'time', 'member')[dimIndex]
dimIndex
c('lon', 'lat', 'time', 'member')[c(1,3,2)]
c('lon', 'lat', 'time', 'member')[c(1,2,3)]
attributes(gridData$Data)$dimensions
grep('longitude', 'lon')
grep('lon','longitude')
?grep
dimIndex
order(dimIndex)
dimIndex
str(dimIndex)
devtools::check()
devtools::check()
writeNcdf(a, writePath)
debug(writeNcdf)
writeNcdf(a, writePath)
devtools::check()
debug(writeNcdf)
writeNcdf(a, writePath)
dimIndex
str(dimList)
str(dimList)
str(dimList)
str(var)
name
str(nc)
b <- loadNcdf(writePath, name[6])
str(b)
identical(a, b)
str(a)
identical(a$Variable, b$Variable)
identical(a$xyCoords, b$xyCoords)
identical(a$Dates, b$Dates)
identical(a$Data, b$Data)
str(a$Data)
str(b$Data)
a$Data == b$Data
a$Data - b$Data
a$Data - b$Data > 0.0001
any((a$Data - b$Data > 0.0001) == T)
any((a$Data - b$Data > 0.0000001) == T)
devtools::build()
devtools::check()
devtools::build()
library(hyfo)
?biasCorrect
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
data(tgridData)
newFrc <- biasCorrect(nc, tgridData, tgridData)
newFrc <- biasCorrect(tgridData, tgridData, tgridData)
debug(biasCorrect)
newFrc <- biasCorrect(tgridData, tgridData, tgridData)
undebug(biasCorrect)
debug(biasCorrect.list)
devtools::check()
debug(biasCorrect.list)
newFrc <- biasCorrect(tgridData, tgridData, tgridData)
memberIndex
devtools::check()
devtools::build()
newFrc <- biasCorrect(tgridData, tgridData, tgridData)
devtools::check()
newFrc <- biasCorrect(tgridData, tgridData, tgridData)
devtools::build()
?fortify
??fortify
library(hyfo)
plotTS(testdl[[1]])
plotTS(testdl[[1]], x = 'xxx', y = 'yyy', title = 'aaa')
plotTS(list = testdl)
plotTS(testdl[[1]], testdl[[2]], plot = 'cum')
plotTS <- function(..., type = 'line', output = 'data', plot = 'norm', name = NULL, x = NULL,
y = NULL, title = NULL, list = NULL) {
## arrange input TS or TS list.
if (is.null(list)) {
list <- list(...)
if (!class(list[[1]]) == 'data.frame') {
warning('Your input is probably a list, but you forget to add "list = " before it.
Try again, or check help for more information.')
}
#     Following part is for plot different time series with different date, but too complicated
#     using ggplot. and normal use doesn't need such process. So save it as backup.
#     listNames <- names(list)
#     # in order to be used later to differentiate lists, there should be a name for each element.
#     # Then assign the name column to each list element.
#     if (is.null(listNames)) listNames <- 1:length(list)
#
#     giveName <- function(x, y) {
#       colnames(x) <- NULL
#       x$TSname <- rep(listNames[y], nrow(x))
#       return(x)
#     }
#     list1 <- mapply(FUN = giveName, x = list, y = 1:length(list), SIMPLIFY = FALSE)
#
#     checkBind(list1, 'rbind')
#
#     TS <- do.call('rbind', list1)
}
list_common <- extractPeriod(list, commonPeriod = TRUE)
TS <- list2Dataframe(list_common)
if (!is.null(names(list)) & (ncol(TS) - 1) == length(list)) colnames(TS)[2:(length(list) + 1)] <- names(list)
# Check input, only check the first column and first row.
if (!grepl('-|/', TS[1, 1])) {
stop('First column is not date or Wrong Date formate, check the format in ?as.Date{base}
and use as.Date to convert.')
}
TS[, 1] <- as.Date(TS[, 1])
colnames(TS)[1] <- 'Date'
# first column's name may not be Date, so change its name to Date
data_plot <- melt(TS, id.var = 'Date')
NAIndex <- which(is.na(data_plot$value))
# assign 0 to NA values
if (plot == 'norm') {
data_plot$value[NAIndex] <- 0
lineSize <- 0.7
} else if (plot == 'cum') {
TS[is.na(TS)] <- 0
cum <- cbind(data.frame(Date = TS[, 1]), cumsum(TS[2:ncol(TS)]))
data_plot <- melt(cum, id.var = 'Date')
lineSize <- 1
}
# Assigning x, y and title
if (is.null(x)) x <- colnames(TS)[1]
# y aixs cannot decide if it's a multi column dataframe
#if (is.null(y)) y <- names[2]
theme_set(theme_bw())
mainLayer <- with(data_plot, {
ggplot(data = data_plot) +
# It's always better to use colname to refer to
aes(x = Date, y = value, color = variable) +
theme(plot.title = element_text(size = rel(1.8), face = 'bold'),
axis.text.x = element_text(size = rel(1.8)),
axis.text.y = element_text(size = rel(1.8)),
axis.title.x = element_text(size = rel(1.8)),
axis.title.y = element_text(size = rel(1.8))) +
labs(x = x, y = y, title = title)
})
#  color <- 'dodgerblue4'
if (type == 'bar') {
secondLayer <- with(data_plot, {
geom_bar(stat = 'identity')
})
} else if (type == 'line') {
secondLayer <- with(data_plot, {
geom_line(size = lineSize)
})
} else {
stop("No such plot type.")
}
missingVLayer <- with(TS, {
geom_point(data = data_plot[NAIndex, ], group = 1, size = 3, shape = 4, color = 'black')
})
plotLayer <- mainLayer + secondLayer + missingVLayer
print(plotLayer)
if (output == 'ggplot') {
if (is.null(name)) stop('"name" argument not found,
If you choose "ggplot" as output, please assign a name.')
data_plot$name <- rep(name, nrow(data_plot))
data_plot$nav <- rep(0, nrow(data_plot))
data_plot$nav[NAIndex] <- 1
return(data_plot)
}
}
plotTS(list = testdl)
library(reshape2)
plotTS(list = testdl)
library(ggplot2)
plotTS(list = testdl)
#' @export
plotTS <- function(..., type = 'line', output = 'data', plot = 'norm', name = NULL, showNA = TRUE,
x = NULL, y = NULL, title = NULL, list = NULL) {
## arrange input TS or TS list.
if (is.null(list)) {
list <- list(...)
if (!class(list[[1]]) == 'data.frame') {
warning('Your input is probably a list, but you forget to add "list = " before it.
Try again, or check help for more information.')
}
#     Following part is for plot different time series with different date, but too complicated
#     using ggplot. and normal use doesn't need such process. So save it as backup.
#     listNames <- names(list)
#     # in order to be used later to differentiate lists, there should be a name for each element.
#     # Then assign the name column to each list element.
#     if (is.null(listNames)) listNames <- 1:length(list)
#
#     giveName <- function(x, y) {
#       colnames(x) <- NULL
#       x$TSname <- rep(listNames[y], nrow(x))
#       return(x)
#     }
#     list1 <- mapply(FUN = giveName, x = list, y = 1:length(list), SIMPLIFY = FALSE)
#
#     checkBind(list1, 'rbind')
#
#     TS <- do.call('rbind', list1)
}
list_common <- extractPeriod(list, commonPeriod = TRUE)
TS <- list2Dataframe(list_common)
if (!is.null(names(list)) & (ncol(TS) - 1) == length(list)) colnames(TS)[2:(length(list) + 1)] <- names(list)
# Check input, only check the first column and first row.
if (!grepl('-|/', TS[1, 1])) {
stop('First column is not date or Wrong Date formate, check the format in ?as.Date{base}
and use as.Date to convert.')
}
TS[, 1] <- as.Date(TS[, 1])
colnames(TS)[1] <- 'Date'
# first column's name may not be Date, so change its name to Date
data_plot <- melt(TS, id.var = 'Date')
NAIndex <- which(is.na(data_plot$value))
# assign 0 to NA values
if (plot == 'norm') {
data_plot$value[NAIndex] <- 0
lineSize <- 0.7
} else if (plot == 'cum') {
TS[is.na(TS)] <- 0
cum <- cbind(data.frame(Date = TS[, 1]), cumsum(TS[2:ncol(TS)]))
data_plot <- melt(cum, id.var = 'Date')
lineSize <- 1
}
# Assigning x, y and title
if (is.null(x)) x <- colnames(TS)[1]
# y aixs cannot decide if it's a multi column dataframe
#if (is.null(y)) y <- names[2]
theme_set(theme_bw())
mainLayer <- with(data_plot, {
ggplot(data = data_plot) +
# It's always better to use colname to refer to
aes(x = Date, y = value, color = variable) +
theme(plot.title = element_text(size = rel(1.8), face = 'bold'),
axis.text.x = element_text(size = rel(1.8)),
axis.text.y = element_text(size = rel(1.8)),
axis.title.x = element_text(size = rel(1.8)),
axis.title.y = element_text(size = rel(1.8))) +
labs(x = x, y = y, title = title)
})
#  color <- 'dodgerblue4'
if (type == 'bar') {
secondLayer <- with(data_plot, {
geom_bar(stat = 'identity')
})
} else if (type == 'line') {
secondLayer <- with(data_plot, {
geom_line(size = lineSize)
})
} else {
stop("No such plot type.")
}
if (showNA == TRUE) {
missingVLayer <- with(TS, {
geom_point(data = data_plot[NAIndex, ], group = 1, size = 3, shape = 4, color = 'black')
})
mainLayer <- mainLayer + missingVLayer
}
plotLayer <- mainLayer + secondLayer
print(plotLayer)
if (output == 'ggplot') {
if (is.null(name)) stop('"name" argument not found,
If you choose "ggplot" as output, please assign a name.')
data_plot$name <- rep(name, nrow(data_plot))
data_plot$nav <- rep(0, nrow(data_plot))
data_plot$nav[NAIndex] <- 1
return(data_plot)
}
}
plotTS(list = testdl)
plotTS(list = testdl, showNA = F)
devtools::document()
devtools::check()
devtools::document()
