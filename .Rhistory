drizzle <- which(frc > minHindcastPreci & frc <= min(hindcast[hindcast > minHindcastPreci], na.rm = TRUE)
& !is.na(frc))
if (length(rain) > 0) {
ecdfFrc <- ecdf(frc[rain])
if (extrapolate == 'constant') {
# This higher and lower index mean the extrapolation part
higherIndex <- which(frc[rain] > max(hindcast, na.rm = TRUE))
lowerIndex <- which(frc[rain] < min(hindcast, na.rm = TRUE))
extrapolateIndex <- c(higherIndex, lowerIndex)
non_extrapolateIndex <- setdiff(1:length(rain), extrapolateIndex)
if (length(higherIndex) > 0) {
maxHindcast <- max(hindcast, na.rm = TRUE)
dif <- maxHindcast - max(obs, na.rm = TRUE)
frc[rain[higherIndex]] <- frc[higherIndex] - dif
}
if (length(lowerIndex) > 0) {
minHindcast <- min(hindcast, na.rm = TRUE)
dif <- minHindcast - min(obs, nna.rm = TRUE)
frc[rain[lowerIndex]] <- frc[lowerIndex] - dif
}
# Here the original function doesn't accout for the situation that extraploateIndex is 0
# if it is 0, rain[-extraploateIndex] would be nothing
# Above has been solved by using setdiff.
frc[rain[non_extrapolateIndex]] <- quantile(obs[which(obs > prThreshold & !is.na(obs))],
probs = ecdfHindcast(frc[rain[non_extrapolateIndex]]),
na.rm = TRUE, type = 4)
} else {
frc[rain] <- quantile(obs[which(obs > prThreshold & !is.na(obs))],
probs = ecdfHindcast(frc[rain]), na.rm = TRUE, type = 4)
}
}
if (length(drizzle) > 0){
# drizzle part is a seperate part. it use the ecdf of frc (larger than minHindcastPreci) to
# biascorrect the original drizzle part
frc[drizzle] <- quantile(frc[which(frc > min(hindcast[which(hindcast > minHindcastPreci)], na.rm = TRUE) &
!is.na(frc))], probs = ecdfFrc(frc[drizzle]), na.rm = TRUE,
type = 4)
}
frc[noRain] <- 0
} else {
# in this condition minHindcastPreci is the max of hindcast, so all hindcast <= minHindcastPreci
# And frc distribution is used then.
noRain <- which(frc <= minHindcastPreci & !is.na(frc))
rain <- which(frc > minHindcastPreci & !is.na(frc))
if (length(rain) > 0) {
ecdfFrc <- ecdf(frc[rain])
frc[rain] <- quantile(obs[which(obs > prThreshold & !is.na(obs))], probs = ecdfFrc(frc[rain]),
na.rm = TRUE, type = 4)
}
frc[noRain]<-0
}
return(frc)
}
biasCorrect_core_gqm <- function(frc, hindcast, obs, prThreshold, minHindcastPreci) {
if (any(obs > prThreshold)) {
ind <- which(obs > prThreshold & !is.na(obs))
obsGamma <- fitdistr(obs[ind],"gamma", lower = c(0, 0))
ind <- which(hindcast > 0 & !is.na(hindcast))
hindcastGamma <- fitdistr(hindcast[ind],"gamma", lower = c(0, 0))
rain <- which(frc > minHindcastPreci & !is.na(frc))
noRain <- which(frc <= minHindcastPreci & !is.na(frc))
probF <- pgamma(frc[rain], hindcastGamma$estimate[1], rate = hindcastGamma$estimate[2])
frc[rain] <- qgamma(probF,obsGamma$estimate[1], rate = obsGamma$estimate[2])
frc[noRain] <- 0
} else {
warning('All the observations of this cell(station) are lower than the threshold,
no bias correction applied.')
}
return(frc)
}
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
library(MASS)
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
trace(biasCorrect)
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
devtools::check()
trace("biasCorrect", browser, exit=browser, signature = c("data.frame", "data.frame", "data.frame"))
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
debug(hindcast)
debug(preprocessHindcast)
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
debug(biasCorrect_core_gqm)
frc_new4 <- biasCorrect(frc, hindcast, obs, method = 'gqm', preci = TRUE)
devtools::check()
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
data(tgridData)
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
obsGamma <- fitdistr(obs[ind],"gamma", lower = c(0, 0))
obsGamma <- fitdistr(obs[ind],"gamma")
obsGamma <- fitdistr(obs[ind],"gamma", lower = c(-4, -5))
?optim
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
debug(optim)
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
method
trace("optim")
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
trace("optim")
traceback("optim")
traceback("optim")
debug(fitdistr)
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
start
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
obsGamma <- fitdistr(obs[ind],"gamma")
start
method
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
length(NULL)
start
method
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
obsGamma <- fitdistr(obs[ind],"gamma")
start
method
method
lower
length(lower)
length(lower) > 1L
npar
par
con
lower
upper
rep_len(upper)
npar
rep_len(upper, npar)
parm
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
fn
fn()
?fn
??fn
newFrc <- biasCorrect(nc, nc, tgridData, method = 'gqm', preci = TRUE)
obsGamma <- fitdistr(obs[ind],"gamma", lower = c(0, 0), upper = c(1000, 0))
devtools::check()
devtools::check()
devtools::check()
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(B=letters[4:5],A=4:5)
l = list(DT1,DT2)
rbindlist(l, use.names=TRUE)
install.packages('data.table')
library(data.table)
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(B=letters[4:5],A=4:5)
l = list(DT1,DT2)
rbindlist(l, use.names=TRUE)
DT1
DT2
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
plotTS(testdl[[1]])
plotTS(testdl[[1]], x = 'xxx', y = 'yyy', title = 'aaa')
plotTS(list = testdl)
a1 <- plotTS(testdl[[1]], output = 'ggplot', name = 1)
a2 <- plotTS(testdl[[2]], output = 'ggplot', name = 2)
plotTS_comb(a1, a2)
plotTS_comb(list = list(a1, a2), y = 'y axis', nrow = 2)
debug(plotTS_comb)
plotTS_comb(list = list(a1, a2), y = 'y axis', nrow = 2)
class(data_ggplot)
devtools::check()
a1 <- plotTS(testdl[[1]], output = 'ggplot', name = 1)
a2 <- plotTS(testdl[[2]], output = 'ggplot', name = 2)
plotTS_comb(a1, a2)
debug(plotTS_comb)
plotTS_comb(a1, a2)
class(data_ggplot)
class(data_ggplot)
class(data_ggplot) == c('data.table', 'data.frame')
data_ggplot$name
devtools::check()
a1 <- plotTS(testdl[[1]], output = 'ggplot', name = 1)
a2 <- plotTS(testdl[[2]], output = 'ggplot', name = 2)
plotTS_comb(a1, a2)
plotTS_comb(list = list(a1, a2), y = 'y axis', nrow = 2)
devtools::check()
trace("extractPeriod", browser, exit=browser, signature = c("list"))
AAA <- data.frame(
# date column
Date = seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1),
# value column
AAA = sample(1:100,length(seq(as.Date('1990-10-28'),as.Date('1997-4-1'),1)), repl = TRUE))
BBB <- data.frame(
Date = seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1),
BBB = sample(1:100,length(seq(as.Date('1993-3-28'),as.Date('1999-1-1'),1)), repl = TRUE))
CCC <- data.frame(
Date = seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1),
CCC = sample(1:100,length(seq(as.Date('1988-2-2'),as.Date('1996-1-1'),1)), repl = TRUE))
list <- list(AAA, BBB, CCC)# dput() and dget() can be used to save and load list file.
list_com <- extractPeriod(list, commonPeriod = TRUE)
Dates
Dates <- rbindlist(Dates)
do.call('rbind', Dates)
Dates[1]
Dates[[1]]
rbindlist(Dates)
is.list(Dates[1])
debug(rbindlist)
rbindlist(Dates)
Dates[[1]]
Dates
datalist
str(datalist)
str(Dates)
rbindlist(datalist)
devtools::document()
devtools::check()
debug(collectData_csv_anarbe)
file <- system.file("extdata", "1999.csv", package = "hyfo")
folder <- strsplit(file, '1999')[[1]][1]
a <- collectData_csv_anarbe(folder)
data
data <- rbindlist(data)
undebug(rbindlist)
data <- rbindlist(data)
do.call('rbind', data)
fileNames
str(data)
data <- lapply(fileNames, readColumn_csv_anarbe)
str(data)
rbindlist(data)
fileNames <- list.files(folderName, pattern='*.csv', full.names = TRUE)
data <- lapply(fileNames, readColumn_csv_anarbe)
rbindlist(data)
a <- collectData_csv_anarbe(folder)
do.call('rbind', data)
data <- do.call('rbind', data)
data <- data[, 1:2]
data
data[,1]
data <- rbindlist(data)
fileNames <- list.files(folderName, pattern='*.csv', full.names = TRUE)
data <- lapply(fileNames, readColumn_csv_anarbe)
data <- rbindlist(data)
data
data <- data[, 1:2]
data
data[, 1]
as.Date(data[, 1], format = '%d/%m/%Y')
str(data[,1])
fileNames <- list.files(folderName, pattern='*.csv', full.names = TRUE)
data <- lapply(fileNames, readColumn_csv_anarbe)
data <- do.call('rbind', data)
data <- data[, 1:2]
data
data[, 1]
str(data[, 1])
a <- data[, 1]
a
fileNames <- list.files(folderName, pattern='*.csv', full.names = TRUE)
data <- lapply(fileNames, readColumn_csv_anarbe)
data <- rbindlist(data)
data <- data[, 1:2]
b <- data[, 1]
b
str(b)
str(a)
as.Date(data[, 1], format = '%d/%m/%Y')
as.Date(data[1, 1], format = '%d/%m/%Y')
data[1, 1]
str(data[1, 1])
as.Date(data[1, 1])
data[1,]
data[1,1]
data[1,1] = '02/01/1999'
data[1,1] == '02/01/1999'
data[2,1]
data[2,1] == '03/01/1999'
data[,1] == '03/01/1999'
data[,1]
as.Date('03/01/1999')
data[, 1]
data[2, 1]
str(data[2, 1])
data[[2]]
data[,2]
devtools::check()
debug(collectData_csv_anarbe)
a <- collectData_csv_anarbe(folder)
file <- system.file("extdata", "1999.csv", package = "hyfo")
folder <- strsplit(file, '1999')[[1]][1]
a <- collectData_csv_anarbe(folder)
devtools::check()
debug(collectData_csv_anarbe)
file <- system.file("extdata", "1999.csv", package = "hyfo")
folder <- strsplit(file, '1999')[[1]][1]
a <- collectData_csv_anarbe(folder)
data
data[, 1] <- as.Date(data[[1]], format = '%d/%m/%Y')
data
fileNames <- list.files(folderName, pattern='*.csv', full.names = TRUE)
data <- lapply(fileNames, readColumn_csv_anarbe)
data <- rbindlist(data)
data <- data[, 1:2]
data[[1]] <- as.Date(data[[1]], format = '%d/%m/%Y')
data
debug(fillGap_lmCoef)
b <- read.table(text = '        Date  AAA  BBB  CCC  DDD  EEE
49 1999-12-15 24.8 21.4 25.6 35.0 17.4
50 1999-12-16   NA  0.6  1.5  6.3  2.5
51 1999-12-17   NA 16.3 20.3  NA 19.2
52 1999-12-18   13  1.6 NA  6.3  0.0
53 1999-12-19   10 36.4 12.5 26.8 24.9
54 1999-12-20   NA  0.0  0.0  0.2  0.0
55 1999-12-21  0.2  0.0  0.0  0.0  0.0
56 1999-12-22  0.0  0.0  0.0  0.0  0.0')
b1 <- fillGap(b)
lmCoef
rbindlist(lmCoef)
l <- list(c("16:59:20", "100", "143.88"), c("16:59:05", "106", "143.90"),
c("16:58:49", "900", "143.92"), c("16:58:49", "100", "143.92"),
c("16:58:46", "100", "143.93"), c("16:58:46", "200", "143.93"))
transpose(l)
rbindlist(transpose(lmCoef))
transpose(lmCoef)
lmCoef
rbindlist(l)
rbindlist(transpose(l))
setDT(l)
l
t(setDT(l))
setDT(t(lmCoef))
lmCoef
l <- dim(data)[2]
m <- diag(l)# m is the coeficients matrix
m[lower.tri(m)] <- combn(data, 2, function(x) coef(lm(x[, 2] ~ x[, 1] + 0)))
tm <- t(m)
tm[lower.tri(tm)] <- combn(data, 2, function(x) coef(lm(x[, 1] ~ x[, 2] + 0)))
m <- t(tm)
lmCoef <- lapply(1 : l, function(x) m[x,corOrder[, x]])
lmCoef
a <- setDT(t(lmCoef))
a
a <- setDT(lmCoef)
a
lmCoef
l <- dim(data)[2]
m <- diag(l)# m is the coeficients matrix
m[lower.tri(m)] <- combn(data, 2, function(x) coef(lm(x[, 2] ~ x[, 1] + 0)))
tm <- t(m)
tm[lower.tri(tm)] <- combn(data, 2, function(x) coef(lm(x[, 1] ~ x[, 2] + 0)))
m <- t(tm)
lmCoef <- lapply(1 : l, function(x) m[x,corOrder[, x]])
a <- setDT(lmCoef)
a
lmCoef
l <- dim(data)[2]
m <- diag(l)# m is the coeficients matrix
m[lower.tri(m)] <- combn(data, 2, function(x) coef(lm(x[, 2] ~ x[, 1] + 0)))
tm <- t(m)
tm[lower.tri(tm)] <- combn(data, 2, function(x) coef(lm(x[, 1] ~ x[, 2] + 0)))
m <- t(tm)
lmCoef <- lapply(1 : l, function(x) m[x,corOrder[, x]])
lmCoef
t(setDT(lmCoef))
l <- dim(data)[2]
m <- diag(l)# m is the coeficients matrix
m[lower.tri(m)] <- combn(data, 2, function(x) coef(lm(x[, 2] ~ x[, 1] + 0)))
tm <- t(m)
tm[lower.tri(tm)] <- combn(data, 2, function(x) coef(lm(x[, 1] ~ x[, 2] + 0)))
m <- t(tm)
lmCoef <- lapply(1 : l, function(x) m[x,corOrder[, x]])
lmCoef
lmCoef[[1]]
lmCoef[[1]] <- rbind(lmCoef[[1]], lmCoef[[2]])
lmCoef
rbindlist(lmCoef)
do.call('rbind', lmCoef)
lmCoef[[2]] <- rbind(lmCoef[[3]], lmCoef[[4]])
lmCoef
a <- lmCoef[1:2]
a
rbindlist(a)
rbindlist(list = list(a[[1]], b[[2]]))
rbindlist(list(a[[1]], b[[2]]))
?rbindlist
a <- list(a[[1]], b[[2]])
a
b <- list(a[[1]], a[[2]])
b
a[[2]]
a
devtools::check()
devtools::build()
rm(a)
rm(b)
rm(filePath)
rm(name)
rm(nc)
rm(varname)
rm(writePath)
devtools::document()
devtools::check(cran = T, manual manual = T)
devtools::check(cran = T, manual = T)
rm(a)
rm9b
rm(b)
rm(filePath)
rm(name)
rm(nc)
rm(varname)
rm(writePath)
devtools::check(as.cran= T)
?devtools::check
devtools::check(cran= T)
?devtools::build()
devtools::build()
dvetools:check(cran = T)
devtools:check(cran = T)
library(devtools)
devtools::check(cran = T)
devtools::build()
devtools::build()
install.packages('knitr')
devtools::build()
library(hyfo)
?writeNcdf
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
varname
nc <- loadNcdf(filePath, varname)
writeNcdf(nc, 'test.nc')
debug(writeNcdf)
writeNcdf(nc, 'test.nc')
writeNcdf(nc, 'test.nc')
debug(getTimeUnit)
dates
units()
units
time
dates
dates[1]
rem
devtools::build()
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
library(hyfo)
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
sp::rebuild_CRS(cat)
install.packages('sp')
install.packages("sp")
install.packages('sp')
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
library(hyfo)
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
sp::rebuild_CRS(cat)
a <- sp::rebuild_CRS(cat)
a
getSpatialMap(tgridData, method = 'meanAnnual', catchment = a)
save(a)
save(a, file.choose())
save(file.choose(), a)
file<-file.choose()
file<-choose.dir()
save(a, file)
file
save(file, a)
saveRDS(a, file)
saveRDS(a, choose.dir())
saveRDS(a, choose.dir())
saveRDS(a, 'testCat.shp')
saveRDS(a, file.choose(new = T))
library(hyfo)
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
cat
a
a == cat
identical(a, cat)
devtools::build()
devtools::check()
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
library(hyfo)
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
file <- system.file("extdata", "testCat.rda", package = "hyfo")
cat <- shp2cat(file)
file <- system.file("extdata", "testCat.shp", package = "hyfo")
cat <- shp2cat(file)
devtools::check()
devtools::check(cran = T)
devtools::build()
devtools::document()
devtools::check(cran = T)
devtools::built()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::check(remote = T, cran = T)
devtools::check_win_devel()
devtools::build()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::build()
devtools::build()
