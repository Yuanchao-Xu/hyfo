})
} else {
stop("No such plot type.")
}
missingVLayer <- with(TS, {
geom_point(data = data_plot[NAIndex, ], group = 1, size = 3, shape = 4, color = 'black')
})
plotLayer <- mainLayer + secondLayer + missingVLayer
print(plotLayer)
if (output == 'ggplot') {
if (is.null(name)) stop('"name" argument not found,
If you choose "ggplot" as output, please assign a name.')
data_plot$name <- rep(name, nrow(data_plot))
data_plot$nav <- rep(0, nrow(data_plot))
data_plot$nav[NAIndex] <- 1
return(data_plot)
}
}
#' Combine time seires plot together
#' @param ... different time series plots generated by \code{plotTS(, output = 'ggplot')}, refer to details.
#' @details
#' ..., representing different ouput file generated by \code{plotTS(, output = 'ggplot'), name = yourname},
#' different names must be assigned when generating different output.
#'
#' e.g.
#' a1, a2, a3 are different files generated by \code{plotTS(, output = 'ggplot'), name = yourname}, you can
#' set \code{plotTS(a1,a2,a3)} or \code{plotTS(list = list(a1,a2,a3))}
#'
#' @param nrow A number showing the number of rows.
#' @param type A string showing 'line' or 'bar'.
#' @param list If input is a list containing different ggplot data, use l\code{list = inputlist}.
#' @param x A string of x axis name.
#' @param y A string of y axis name.
#' @param title A string of the title.
#' @param output A boolean, if chosen TRUE, the output will be given.
#' NOTE: yOU HAVE TO PUT A \code{list = }, before your list.
#' @return A combined time series plot.
#' @examples
#' a1 <- plotTS(testdl[[1]], output = 'ggplot', name = 1)
#' a2 <- plotTS(testdl[[2]], output = 'ggplot', name = 2)
#'
#' plotTS_comb(a1, a2)
#' plotTS_comb(list = list(a1, a2), y = 'y axis', nrow = 2)
#'
#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/
#'
#' @references
#' \itemize{
#' \item H. Wickham. ggplot2: elegant graphics for data analysis. Springer New York, 2009.
#' }
#' @export
#' @import ggplot2
plotTS_comb <- function(..., nrow = 1, type = 'line', list = NULL, x = 'Date', y = '', title = '',
output = FALSE){
# In ploting the time series, since the data comes from outside of hyfo,
# It's more complicated, since they don't always have the same
# column name, if not, there is not possible to do rbind.
# So we need to first save the name, and rbind, and put back the name.
if (!is.null(list)) {
checkBind(list, 'rbind')
data_ggplot <- do.call('rbind', list)
} else {
bars <- list(...)
checkBind(bars, 'rbind')
data_ggplot <- do.call('rbind', bars)
}
if (!class(data_ggplot) == 'data.frame') {
warning('Your input is probably a list, but you forget to add "list = " before it.
Try again, or check help for more information.')
} else if (is.null(data_ggplot$name)) {
stop('No "name" column in the input data, check the arguments in getPreciBar(), if
output = "ggplot" is assigned, more info please check ?getPreciBar.')
}
theme_set(theme_bw())
mainLayer <- with(data_ggplot, {
ggplot(data = data_ggplot) +
# It's always better to use colname to refer to
aes(x = Date, y = value, color = variable) +
theme(plot.title = element_text(size = rel(1.8), face = 'bold'),
axis.text.x = element_text(angle = 90, hjust = 1, size = rel(1.8)),
axis.text.y = element_text(size = rel(1.8)),
axis.title.x = element_text(size = rel(1.8)),
axis.title.y = element_text(size = rel(1.8))) +
geom_point(data = data_ggplot[data_ggplot$nav == 1, ], size = 2, shape = 4, color = 'red') +
facet_wrap( ~ name, nrow = nrow) +
labs(x = x, y = y, title = title)
})
if (type == 'bar') {
secondLayer <- with(data_ggplot, {
geom_bar(stat = 'identity', size = 1)
})
} else if (type == 'line') {
secondLayer <- with(data_ggplot, {
geom_line(size = 1)
})
} else {
stop("No such plot type.")
}
print(mainLayer + secondLayer)
if (output == TRUE) return(data_ggplot)
}
#' get L moment analysis of the input distribution
#'
#' @param dis A distribution, for hydrology usually a time series with only data column without time.
#' @return The mean, L-variation, L-skewness and L-kurtosis of the input distribution
#' @examples
#' dis <- seq(1, 100)
#' getLMom(dis)
#'
#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/
#'
#' @export
#' @references
#'
#' \itemize{
#' \item J. R. M. Hosking (2015). L-moments. R package, version 2.5. URL:
#' http://CRAN.R-project.org/package=lmom.
#' }
#'
#'
#' @importFrom lmom samlmu
#'
getLMom <- function(dis){
LMom <- samlmu(dis, nmom = 4, ratios = TRUE)
mean <- LMom[1]
LCV <- LMom[2]/LMom[1]
Lskew <- LMom[3]
Lkur <- LMom[4]
output <- data.frame(mean = mean, Lcv = LCV, Lskew = Lskew, Lkur = Lkur)
return(output)
}
#' get moment analysis of the input distribution
#'
#' @param dis A distribution, for hydrology usually a time series with only data column without time.
#' @return The mean, variation, skewness and kurtosis of the input distribution
#' @examples
#' dis <- seq(1, 100)
#' getMoment(dis)
#'
#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/
#'
#' @export
#' @references
#'
#' \itemize{
#' \item Lukasz Komsta and Frederick Novomestky (2015). moments: Moments, cumulants, skewness, kurtosis and
#' related tests. R package version 0.14. http://CRAN.R-project.org/package=moments
#'
#' \item R Core Team (2015). R: A language and environment for statistical computing. R Foundation for
#' Statistical Computing, Vienna, Austria. URL http://www.R-project.org/.
#' }
#'
#' @importFrom moments skewness kurtosis
#' @importFrom stats var
getMoment <- function(dis) {
mean <- mean(dis, na.rm = TRUE)
variance <- var(dis, na.rm = TRUE)
skewness <- skewness(dis, na.rm = TRUE)
kurtosis <- kurtosis(dis, na.rm = TRUE)
output <- data.frame(mean=mean, Variance = variance, Skewness = skewness, Kurtosis = kurtosis)
return(output)
}
plotTS(list = TSlist, plot = 'cum')
debug(plotTS)
plotTS(list = TSlist, plot = 'cum')
ncol(TS) - 1) == length(list)
(ncol(TS) - 1) == length(list)
ncol(TS)
length(list)
str(list)
undebug(plotTS)
TSlist <- list(obs, frc, frc_new, frc_new1, frc_new2, frc_new3, frc_new4)
names(TSlist) <- c('obs', 'frc', 'delta', 'delta_preci', 'scale', 'eqm', 'gqm')
plotTS(list = TSlist, plot = 'cum')
TSlist <- list(dataframe, dataframe1)
names(TSlist) <- c('1st', '2nd')
plotTS(list = TSlist, plot = 'cum')
TSlist <- list(testdl[[1]], testdl[[2]])
names(TSlist) <- c('1st', '2nd')
plotTS(list = TSlist, plot = 'cum')
loadNcdf
library(hyfo)
?loadNcdf
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
?downscaleNcdf
nc2 <- downscaleNcdf(nc, year = 2005, month = 3:8)
str(nc2)
?extractPeriod
?getHisEnsem
b <- getHisEnsem(a, example = c('1994-2-4', '1996-1-4'))
a <- testdl[[1]]
b <- getHisEnsem(a, example = c('1994-2-4', '1996-1-4'))
b <- getHisEnsem(a, example = c('1994-2-4', '1996-1-4'), plot = 'cum')
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
varname <- getNcdfVar(filePath)
nc <- loadNcdf(filePath, varname)
frc <- frc
frc <- nc
hindcast <- nc
obs <- nc
str(frc)
devtools::check()
file <- system.file("extdata", "1999.csv", package = "hyfo")
folder <- strsplit(file, '1999')[[1]][1]
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
folder
file <- system.file("extdata", "1999.csv", package = "hyfo")
file
filePath <- system.file("extdata", "tnc.nc", package = "hyfo")
filePath
file <- system.file("extdata", "1999.csv", package = "hyfo")
file
folder <- strsplit(file, '1999')[[1]][1]
a <- collectData_csv_anarbe(folder)
library(hyfo)
a <- collectData_csv_anarbe(folder)
a <- collectData(folder, fileType = 'csv', range = c(10, 20, 1, 2))
folder <- file.path(path.package("hyfo"), 'extdata')
a <- collectData(folder, fileType = 'csv', range = c(10, 20, 1,2))
folder
a
a <- collectData_csv_anarbe(folder)
debug(collectData_csv_anarbe)
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
fileNames
debug(readColumn_csv_anarbe)
fileName
fileName
fileName <- "C:/Users/Yuanchao/Documents/R/win-library/3.2/hyfo/extdata/1999.csv"
data <- read.csv(fileName, skip = 3)
?read.csv
data <- read.csv(fileName, skip = 4)
a <- collectData_csv_anarbe(folder)
a <- collectData_csv_anarbe(folder)
#' Collect data from csv for Anarbe case.
#'
#' Collect data from the gauging stations in spain, catchement Anarbe
#'
#' @param folderName A string showing the path of the folder holding different csv files.
#' @param output A boolean showing whether the output is given, default is T.
#' @return The collected data from different csv files.
#' @examples
#'
#' #use internal data as an example.
#' file <- system.file("extdata", "1999.csv", package = "hyfo")
#' folder <- strsplit(file, '1999')[[1]][1]
#' a <- collectData_csv_anarbe(folder)
#'
#' # More examples can be found in the user manual on http://yuanchao-xu.github.io/hyfo/
#'
#' @references
#'
#' \itemize{
#' \item http://meteo.navarra.es/estaciones/mapadeestaciones.cfm
#' \item R Core Team (2015). R: A language and environment for statistical computing. R Foundation for
#' Statistical Computing, Vienna, Austria. URL http://www.R-project.org/.
#' }
#'
#' @source http://meteo.navarra.es/estaciones/mapadeestaciones.cfm
#' @export
#' @importFrom utils tail
collectData_csv_anarbe <- function(folderName, output = TRUE){
fileNames <- list.files(folderName, pattern='*.csv', full.names = TRUE)
data <- lapply(fileNames, readColumn_csv_anarbe)
data <- do.call('rbind', data)
data <- data[, 1:2]
data[, 1] <- as.Date(data[, 1], format = '%d/%m/%Y')
#newFileName <- file.choose(new = T)
#write.table(data_new,file=newFileName,row.names = F, col.names = F,sep=',')
a <- unlist(strsplit(folderName, '\\\\|/'))
tarName <- tail(a, 2)[1]
colnames(data) <- c('Date', tarName)
if (output) return(data)
}
readColumn_csv_anarbe <- function(fileName){
data <- read.csv(fileName, skip = 4)
endIndex <- which(data == '', arr.ind = TRUE)[1]-1
data <- data[1:endIndex, ]
if (!is.null(levels(data[, 2]))) {
data[, 2] <- as.numeric(levels((data[, 2])))[data[, 2]]
}
colnames(data) <- c('Date', 'target')
message(fileName)
return(data)
}
a <- collectData_csv_anarbe(folder)
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
page
str(page)
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
grep('updates', page)
page[53]
page[59]
grep('id=\\"updates"', page)
InfoNumber <- lineNumber + 1
lineNumber <- grep('id=\\"updates"', page)
InfoNumber <- lineNumber + 1
page[54]
page[55]
page[56]
page[57]
page[59]
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- page[versionLine]
version
version <- strsplit(page[versionLine], split = c('version', 'was'))
version
version <- strsplit(page[versionLine], split = c('version'))
version
version <- strsplit(page[versionLine], split = ' ')
version
version <- strsplit(page[versionLine], split = ' ')[3]
version
version <- strsplit(page[versionLine], split = ' ')[[3]]
version <- unlist(strsplit(page[versionLine], split = ' '))[3]
version
packageDescription("hyfo")$Version
version_local <- packageDescription("hyfo")$Version
packageDescription("hyfo")
as.numeric(version)
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[3]
version
version <- unlist(strsplit(page[versionLine], split = ' '))[4]
version
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
infoLine <- versionLine + 2
page[57]
info <- strsplit(page[infoLine], split = '<p>')
info
info <- strsplit(strsplit(page[infoLine], split = '<p>'), split = '</p>')
info <- strsplit(strsplit(page[infoLine], split = '<p>')[2], split = '</p>')
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[2]], split = '</p>')
strsplit(page[infoLine], split = '<p>')[2]
strsplit(page[infoLine], split = '<p>')
info <- strsplit(strsplit[(page[infoLine], split = '<p>')[[1]][2], split = '</p>')
strsplit[(page[infoLine], split = '<p>')[[1]][2]
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')
info
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
info
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]][1]
info
message_out <- paste(page[versionLine], '/n', info)
message_out
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
version_msg
message_out <- paste(version_msg, '/n', info)
message_out
message(message_out)
message_out <- paste(version_msg, '\n', info)
message(message_out)
message_out <- paste(version_msg, info, sep = '\n')
message(message_out)
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
if (version != version_local) {
message_out <- paste(version_msg, info, sep = '\n')
message(message_out)
}
}
hyfoUpdates
hyfoUpdates()
?packageStartupMessage()
## For package updates information
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by devtools::install_gihub("Yuanchao-Xu/hyfo")'
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
message(message_out)
}
}
## For package updates information
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- lineNumber + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by devtools::install_gihub("Yuanchao-Xu/hyfo")'
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
message(message_out)
}
}
hyfoUpdates()
devtools::document()
hyfoUpdates()
devtools::document()
hyfoUpdates()
download.file()
?download.file()
download.file()
download.file('dafd')
download.file(destfile = 'dafd')
download.file(url = 'dafa', destfile = 'dafd')
download.file(url = 'www.dafa.com', destfile = 'dafd')
download.file(url = 'https://www.dafa.com', destfile = 'dafd')
try(hyfoUpdates())
try(hyfoUpdates())
try(hyfoUpdates())
devtools::document()
?try
devtools::document()
devtools::document()
try(hyfoUpdates(), silent = TRUE)
try(hyfoUpdates(), silent = TRUE)
suppressWarnings(try(hyfoUpdates(), silent = TRUE))
devtools::document()
devtools::document()
devtools::check()
## For package updates information
hyfoUpdates <- function(){
page <- readLines('http://yuanchao-xu.github.io/hyfo/')
updatesLine <- grep('id=\\"updates"', page)
versionLine <- updatesLine + 2
version <- unlist(strsplit(page[versionLine], split = ' '))[2]
version_local <- packageDescription("hyfo")$Version
# generate message
version_msg <- strsplit(strsplit(page[versionLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
infoLine <- versionLine + 2
info_msg <- strsplit(strsplit(page[infoLine], split = '<p>')[[1]][2], split = '</p>')[[1]]
install_msg <- 'You can update by input: devtools::install_gihub("Yuanchao-Xu/hyfo")'
message_out <- NULL
if (version != version_local) {
message_out <- paste(version_msg, info_msg, install_msg, sep = '\n')
}
return(message_out)
}
.onAttach <- function(libname, pkgname) {
message <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
packageStartupMessage(message)
}
suppressWarnings(try(hyfoUpdates(), silent = TRUE))
suppressWarnings(try(hyfoUpdates(), silent = TRUE))
a <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
a
grep('Error', message)
grep('Error', message[[1]])
message[[1]]
message[1]
message
message <- suppressWarnings(try(hyfoUpdates(), silent = TRUE))
message
is.character(message)
message
length(message)
str(message)
is.atomic(message)
grepl('Version', message)
devtools::document()
devtools::check()
devtools::check()
devtools::build()
install.packages("E:/1/R/hyfo_1.2.5.tar.gz", repos = NULL, type = "source")
library(hyfo)
library(hyfo)
require(hyfo)
require(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
library(hyfo)
?plotTS
plotTS(testdl[[1]])
plotTS(list = testdl)
plotTS(testdl[[1]], testdl[[2]], plot = 'cum')
search()
library(hyfo)
search()
detach(hyfo)
detach('hyfo')
detach('hyfo', unload = T)
detach('package:hyfo', unload = T)
library(hyfo)
devtools::document()
devtools::check()
?packageDescription
devtools::document()
devtools::check()
